
ADC_POLLING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004db8  08004db8  00005db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e8c  08004e8c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e8c  08004e8c  00005e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e94  08004e94  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e94  08004e94  00005e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004ef8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004ef8  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfe5  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc5  00000000  00000000  00013071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00014d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008aa  00000000  00000000  00015890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021576  00000000  00000000  0001613a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d39f  00000000  00000000  000376b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6f7  00000000  00000000  00044a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003384  00000000  00000000  0011418c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00117510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004da0 	.word	0x08004da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004da0 	.word	0x08004da0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fba1 	bl	8000cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f884 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f978 	bl	8000870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f946 	bl	8000810 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000584:	f000 f8e0 	bl	8000748 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_ADC_Start(&hadc1);
 8000588:	4838      	ldr	r0, [pc, #224]	@ (800066c <main+0xfc>)
 800058a:	f000 ff87 	bl	800149c <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 HAL_ADC_Start(&hadc1);
 800058e:	4837      	ldr	r0, [pc, #220]	@ (800066c <main+0xfc>)
 8000590:	f000 ff84 	bl	800149c <HAL_ADC_Start>
    /* USER CODE END WHILE */
 // Wait for conversion to be completed
   if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000594:	f04f 31ff 	mov.w	r1, #4294967295
 8000598:	4834      	ldr	r0, [pc, #208]	@ (800066c <main+0xfc>)
 800059a:	f001 f815 	bl	80015c8 <HAL_ADC_PollForConversion>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d15a      	bne.n	800065a <main+0xea>
   {
     // Get the ADC value
     adc_value = HAL_ADC_GetValue(&hadc1);
 80005a4:	4831      	ldr	r0, [pc, #196]	@ (800066c <main+0xfc>)
 80005a6:	f001 f89e 	bl	80016e6 <HAL_ADC_GetValue>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a30      	ldr	r2, [pc, #192]	@ (8000670 <main+0x100>)
 80005ae:	6013      	str	r3, [r2, #0]

     // Print the ADC value over UART
   // sprintf(uart_buffer, "CURRENT VALUE : %lu\r\n", adc_value);
    if((adc_value)>400){
 80005b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <main+0x100>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80005b8:	d91f      	bls.n	80005fa <main+0x8a>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2101      	movs	r1, #1
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f002 f871 	bl	80026a8 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f002 f86b 	bl	80026a8 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2104      	movs	r1, #4
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f002 f865 	bl	80026a8 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f002 f85f 	bl	80026a8 <HAL_GPIO_WritePin>
  	   sprintf(uart_buffer, "ABNORMAL DETECTION   CURRENT VALUE : %lu\r\n ", adc_value);
 80005ea:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <main+0x100>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4920      	ldr	r1, [pc, #128]	@ (8000674 <main+0x104>)
 80005f2:	4821      	ldr	r0, [pc, #132]	@ (8000678 <main+0x108>)
 80005f4:	f003 ff34 	bl	8004460 <siprintf>
 80005f8:	e024      	b.n	8000644 <main+0xd4>
  	//   sprintf(uart_buffer,"ABNORMAL DETECTION\n");
     }
     else{
    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000602:	f002 f851 	bl	80026a8 <HAL_GPIO_WritePin>
    	   	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060e:	f002 f84b 	bl	80026a8 <HAL_GPIO_WritePin>
    	   	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061a:	f002 f845 	bl	80026a8 <HAL_GPIO_WritePin>
    	   	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2104      	movs	r1, #4
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f002 f83f 	bl	80026a8 <HAL_GPIO_WritePin>
    	   	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2120      	movs	r1, #32
 800062e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000632:	f002 f839 	bl	80026a8 <HAL_GPIO_WritePin>
    	   	sprintf(uart_buffer, "NORMAL DETECTION  CURRENT VALUE : %lu\r\n ", adc_value);
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <main+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	490f      	ldr	r1, [pc, #60]	@ (800067c <main+0x10c>)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <main+0x108>)
 8000640:	f003 ff0e 	bl	8004460 <siprintf>
    	  // 	 sprintf(uart_buffer,"NORMAL DETECTION\n");

     }
     HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <main+0x108>)
 8000646:	f7ff fdc3 	bl	80001d0 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	4909      	ldr	r1, [pc, #36]	@ (8000678 <main+0x108>)
 8000654:	480a      	ldr	r0, [pc, #40]	@ (8000680 <main+0x110>)
 8000656:	f003 fa31 	bl	8003abc <HAL_UART_Transmit>
   }

   // Stop the ADC

   HAL_ADC_Stop(&hadc1);
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <main+0xfc>)
 800065c:	f000 ff81 	bl	8001562 <HAL_ADC_Stop>
   // Delay for a short period to avoid spamming the output
   HAL_Delay(500);  // Delay for 500 milliseconds
 8000660:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000664:	f000 fb9e 	bl	8000da4 <HAL_Delay>
 HAL_ADC_Start(&hadc1);
 8000668:	e791      	b.n	800058e <main+0x1e>
 800066a:	bf00      	nop
 800066c:	20000078 	.word	0x20000078
 8000670:	20000198 	.word	0x20000198
 8000674:	08004db8 	.word	0x08004db8
 8000678:	20000164 	.word	0x20000164
 800067c:	08004de4 	.word	0x08004de4
 8000680:	200000dc 	.word	0x200000dc

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b096      	sub	sp, #88	@ 0x58
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2244      	movs	r2, #68	@ 0x44
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 ff04 	bl	80044a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006aa:	f002 f833 	bl	8002714 <HAL_PWREx_ControlVoltageScaling>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b4:	f000 f968 	bl	8000988 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b8:	f002 f80e 	bl	80026d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006bc:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <SystemClock_Config+0xc0>)
 80006be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006c2:	4a20      	ldr	r2, [pc, #128]	@ (8000744 <SystemClock_Config+0xc0>)
 80006c4:	f023 0318 	bic.w	r3, r3, #24
 80006c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006cc:	2314      	movs	r3, #20
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006dc:	2360      	movs	r3, #96	@ 0x60
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e4:	2301      	movs	r3, #1
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006ec:	2328      	movs	r3, #40	@ 0x28
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f85d 	bl	80027c0 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800070c:	f000 f93c 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2303      	movs	r3, #3
 8000716:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2104      	movs	r1, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fc5d 	bl	8002fe8 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000734:	f000 f928 	bl	8000988 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000738:	f003 f870 	bl	800381c <HAL_RCCEx_EnableMSIPLLMode>
}
 800073c:	bf00      	nop
 800073e:	3758      	adds	r7, #88	@ 0x58
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075e:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	@ (8000808 <MX_ADC1_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007c0:	f000 fd2a 	bl	8001218 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007ca:	f000 f8dd 	bl	8000988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_ADC1_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	@ 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007ec:	f000 ff88 	bl	8001700 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f000 f8c7 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000078 	.word	0x20000078
 8000808:	50040000 	.word	0x50040000
 800080c:	19200040 	.word	0x19200040

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	@ (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f003 f8e4 	bl	8003a20 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f893 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000dc 	.word	0x200000dc
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b3e      	ldr	r3, [pc, #248]	@ (8000980 <MX_GPIO_Init+0x110>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <MX_GPIO_Init+0x110>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <MX_GPIO_Init+0x110>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <MX_GPIO_Init+0x110>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a37      	ldr	r2, [pc, #220]	@ (8000980 <MX_GPIO_Init+0x110>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <MX_GPIO_Init+0x110>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <MX_GPIO_Init+0x110>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a31      	ldr	r2, [pc, #196]	@ (8000980 <MX_GPIO_Init+0x110>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <MX_GPIO_Init+0x110>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008ce:	2200      	movs	r2, #0
 80008d0:	21f8      	movs	r1, #248	@ 0xf8
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f001 fee7 	bl	80026a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	4829      	ldr	r0, [pc, #164]	@ (8000984 <MX_GPIO_Init+0x114>)
 80008e0:	f001 fee2 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e4:	2308      	movs	r3, #8
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f001 fd69 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000902:	2330      	movs	r3, #48	@ 0x30
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f001 fd5a 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000920:	2340      	movs	r3, #64	@ 0x40
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f001 fd4b 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000946:	2302      	movs	r3, #2
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f001 fd3c 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800095c:	2308      	movs	r3, #8
 800095e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_GPIO_Init+0x114>)
 8000974:	f001 fd2e 	bl	80023d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_MspInit+0x44>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x44>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09e      	sub	sp, #120	@ 0x78
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2254      	movs	r2, #84	@ 0x54
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fd4f 	bl	80044a0 <memset>
  if(hadc->Instance==ADC1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a25      	ldr	r2, [pc, #148]	@ (8000a9c <HAL_ADC_MspInit+0xc0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d143      	bne.n	8000a94 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000a20:	2310      	movs	r3, #16
 8000a22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a24:	2307      	movs	r3, #7
 8000a26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fcf8 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000a46:	f7ff ff9f 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_ADC_MspInit+0xc4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <HAL_ADC_MspInit+0xc4>)
 8000a50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_ADC_MspInit+0xc4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_ADC_MspInit+0xc4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_ADC_MspInit+0xc4>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_ADC_MspInit+0xc4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a7e:	230b      	movs	r3, #11
 8000a80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f001 fca0 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3778      	adds	r7, #120	@ 0x78
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	50040000 	.word	0x50040000
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09e      	sub	sp, #120	@ 0x78
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2254      	movs	r2, #84	@ 0x54
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fceb 	bl	80044a0 <memset>
  if(huart->Instance==USART2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a28      	ldr	r2, [pc, #160]	@ (8000b70 <HAL_UART_MspInit+0xcc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d148      	bne.n	8000b66 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fca5 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ff4c 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_UART_MspInit+0xd0>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <HAL_UART_MspInit+0xd0>)
 8000af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <HAL_UART_MspInit+0xd0>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_UART_MspInit+0xd0>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <HAL_UART_MspInit+0xd0>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_UART_MspInit+0xd0>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b20:	2304      	movs	r3, #4
 8000b22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b30:	2307      	movs	r3, #7
 8000b32:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3e:	f001 fc49 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b54:	2303      	movs	r3, #3
 8000b56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b62:	f001 fc37 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b66:	bf00      	nop
 8000b68:	3778      	adds	r7, #120	@ 0x78
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f8c9 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f003 fc52 	bl	80044b0 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000c000 	.word	0x2000c000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000019c 	.word	0x2000019c
 8000c40:	200002f0 	.word	0x200002f0

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f003 fc11 	bl	80044bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9a:	f7ff fc69 	bl	8000570 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cac:	08004e9c 	.word	0x08004e9c
  ldr r2, =_sbss
 8000cb0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cb4:	200002ec 	.word	0x200002ec

08000cb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_IRQHandler>

08000cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f001 fb51 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f80e 	bl	8000cec <HAL_InitTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	e001      	b.n	8000ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cdc:	f7ff fe5a 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fb4f 	bl	80023ba <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f001 fb27 	bl	8002382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200001a0 	.word	0x200001a0

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200001a0 	.word	0x200001a0

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	609a      	str	r2, [r3, #8]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3360      	adds	r3, #96	@ 0x60
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <LL_ADC_SetOffset+0x44>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	4313      	orrs	r3, r2
 8000e84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	03fff000 	.word	0x03fff000

08000e9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3360      	adds	r3, #96	@ 0x60
 8000eaa:	461a      	mov	r2, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3360      	adds	r3, #96	@ 0x60
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3330      	adds	r3, #48	@ 0x30
 8000f34:	461a      	mov	r2, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	4413      	add	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	f003 031f 	and.w	r3, r3, #31
 8000f4e:	211f      	movs	r1, #31
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	0e9b      	lsrs	r3, r3, #26
 8000f5c:	f003 011f 	and.w	r1, r3, #31
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3314      	adds	r3, #20
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	0e5b      	lsrs	r3, r3, #25
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	0d1b      	lsrs	r3, r3, #20
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	2107      	movs	r1, #7
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	0d1b      	lsrs	r3, r3, #20
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0318 	and.w	r3, r3, #24
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ff8:	40d9      	lsrs	r1, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	0007ffff 	.word	0x0007ffff

0800101c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800102c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6093      	str	r3, [r2, #8]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001054:	d101      	bne.n	800105a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001078:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800107c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010a4:	d101      	bne.n	80010aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f4:	f043 0202 	orr.w	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <LL_ADC_IsEnabled+0x18>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <LL_ADC_IsEnabled+0x1a>
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b02      	cmp	r3, #2
 8001140:	d101      	bne.n	8001146 <LL_ADC_IsDisableOngoing+0x18>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <LL_ADC_IsDisableOngoing+0x1a>
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001164:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001168:	f043 0204 	orr.w	r2, r3, #4
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800118c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001190:	f043 0210 	orr.w	r2, r3, #16
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d101      	bne.n	80011bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011de:	f043 0220 	orr.w	r2, r3, #32
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b08      	cmp	r3, #8
 8001204:	d101      	bne.n	800120a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e126      	b.n	8001480 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fbcb 	bl	80009dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fef1 	bl	8001040 <LL_ADC_IsDeepPowerDownEnabled>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fed7 	bl	800101c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff0c 	bl	8001090 <LL_ADC_IsInternalRegulatorEnabled>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fef0 	bl	8001068 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001288:	4b7f      	ldr	r3, [pc, #508]	@ (8001488 <HAL_ADC_Init+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	099b      	lsrs	r3, r3, #6
 800128e:	4a7f      	ldr	r2, [pc, #508]	@ (800148c <HAL_ADC_Init+0x274>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	099b      	lsrs	r3, r3, #6
 8001296:	3301      	adds	r3, #1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800129c:	e002      	b.n	80012a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f9      	bne.n	800129e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff feee 	bl	8001090 <LL_ADC_IsInternalRegulatorEnabled>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff62 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80012e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 80bf 	bne.w	800146e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 80bb 	bne.w	800146e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001300:	f043 0202 	orr.w	r2, r3, #2
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fefb 	bl	8001108 <LL_ADC_IsEnabled>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001318:	485d      	ldr	r0, [pc, #372]	@ (8001490 <HAL_ADC_Init+0x278>)
 800131a:	f7ff fef5 	bl	8001108 <LL_ADC_IsEnabled>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4619      	mov	r1, r3
 800132a:	485a      	ldr	r0, [pc, #360]	@ (8001494 <HAL_ADC_Init+0x27c>)
 800132c:	f7ff fd5e 	bl	8000dec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e5b      	ldrb	r3, [r3, #25]
 8001334:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800133a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001340:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001346:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	3b01      	subs	r3, #1
 8001364:	045b      	lsls	r3, r3, #17
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001378:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001380:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <HAL_ADC_Init+0x280>)
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	430b      	orrs	r3, r1
 800139a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff26 	bl	80011f2 <LL_ADC_INJ_IsConversionOngoing>
 80013a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d13d      	bne.n	800142a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d13a      	bne.n	800142a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013d0:	f023 0302 	bic.w	r3, r3, #2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	69b9      	ldr	r1, [r7, #24]
 80013da:	430b      	orrs	r3, r1
 80013dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d118      	bne.n	800141a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013f2:	f023 0304 	bic.w	r3, r3, #4
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013fe:	4311      	orrs	r1, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800140a:	430a      	orrs	r2, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	e007      	b.n	800142a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10c      	bne.n	800144c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	f023 010f 	bic.w	r1, r3, #15
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	1e5a      	subs	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
 800144a:	e007      	b.n	800145c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 020f 	bic.w	r2, r2, #15
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	@ 0x54
 800146c:	e007      	b.n	800147e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001472:	f043 0210 	orr.w	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800147e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	053e2d63 	.word	0x053e2d63
 8001490:	50040000 	.word	0x50040000
 8001494:	50040300 	.word	0x50040300
 8001498:	fff0c007 	.word	0xfff0c007

0800149c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe7b 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d14f      	bne.n	8001554 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Start+0x26>
 80014be:	2302      	movs	r3, #2
 80014c0:	e04b      	b.n	800155a <HAL_ADC_Start+0xbe>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fdb6 	bl	800203c <ADC_Enable>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d137      	bne.n	800154a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014fa:	d106      	bne.n	800150a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	f023 0206 	bic.w	r2, r3, #6
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
 8001508:	e002      	b.n	8001510 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	221c      	movs	r2, #28
 8001516:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001532:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001536:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe06 	bl	8001154 <LL_ADC_REG_StartConversion>
 8001548:	e006      	b.n	8001558 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001552:	e001      	b.n	8001558 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001554:	2302      	movs	r3, #2
 8001556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_ADC_Stop+0x16>
 8001574:	2302      	movs	r3, #2
 8001576:	e023      	b.n	80015c0 <HAL_ADC_Stop+0x5e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001580:	2103      	movs	r1, #3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fc9e 	bl	8001ec4 <ADC_ConversionStop>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fdd8 	bl	8002148 <ADC_Disable>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d102      	bne.n	80015e0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015da:	2308      	movs	r3, #8
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e010      	b.n	8001602 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06f      	b.n	80016de <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80015fe:	2304      	movs	r3, #4
 8001600:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001602:	f7ff fbc3 	bl	8000d8c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001608:	e021      	b.n	800164e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d01d      	beq.n	800164e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001612:	f7ff fbbb 	bl	8000d8c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d302      	bcc.n	8001628 <HAL_ADC_PollForConversion+0x60>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d112      	bne.n	800164e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10b      	bne.n	800164e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163a:	f043 0204 	orr.w	r2, r3, #4
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e047      	b.n	80016de <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0d6      	beq.n	800160a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc46 	bl	8000efe <LL_ADC_REG_IsTriggerSourceSWStart>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01c      	beq.n	80016b2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e5b      	ldrb	r3, [r3, #25]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d118      	bne.n	80016b2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b08      	cmp	r3, #8
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d104      	bne.n	80016ca <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2208      	movs	r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e008      	b.n	80016dc <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d103      	bne.n	80016dc <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	220c      	movs	r2, #12
 80016da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0b6      	sub	sp, #216	@ 0xd8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x22>
 800171e:	2302      	movs	r3, #2
 8001720:	e3bb      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x79a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fd38 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 83a0 	bne.w	8001e7c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	3b02      	subs	r3, #2
 8001752:	2b03      	cmp	r3, #3
 8001754:	d81b      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x8e>
 8001756:	a201      	add	r2, pc, #4	@ (adr r2, 800175c <HAL_ADC_ConfigChannel+0x5c>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	08001775 	.word	0x08001775
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001785 	.word	0x08001785
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800176c:	230c      	movs	r3, #12
 800176e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001772:	e010      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001774:	2312      	movs	r3, #18
 8001776:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800177a:	e00c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800177c:	2318      	movs	r3, #24
 800177e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001782:	e008      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800178c:	e003      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800178e:	2306      	movs	r3, #6
 8001790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001794:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80017a4:	f7ff fbbe 	bl	8000f24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fcf9 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80017b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fd19 	bl	80011f2 <LL_ADC_INJ_IsConversionOngoing>
 80017c0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 81a4 	bne.w	8001b16 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 819f 	bne.w	8001b16 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	461a      	mov	r2, r3
 80017e6:	f7ff fbc9 	bl	8000f7c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d00a      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6919      	ldr	r1, [r3, #16]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800181c:	f7ff fb1a 	bl	8000e54 <LL_ADC_SetOffset>
 8001820:	e179      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fb37 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_ADC_ConfigChannel+0x14e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fb2c 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	0e9b      	lsrs	r3, r3, #26
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	e01e      	b.n	800188c <HAL_ADC_ConfigChannel+0x18c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fb21 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800186c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001870:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800187c:	2320      	movs	r3, #32
 800187e:	e004      	b.n	800188a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1a4>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0e9b      	lsrs	r3, r3, #26
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	e018      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1d6>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80018b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80018c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	e004      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff faf0 	bl	8000ec8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fad4 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x214>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fac9 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 021f 	and.w	r2, r3, #31
 8001912:	e01e      	b.n	8001952 <HAL_ADC_ConfigChannel+0x252>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fabe 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001932:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800193a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e004      	b.n	8001950 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <HAL_ADC_ConfigChannel+0x26a>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	e018      	b.n	800199c <HAL_ADC_ConfigChannel+0x29c>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800197e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001982:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001992:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa8d 	bl	8000ec8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2102      	movs	r1, #2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fa71 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_ADC_ConfigChannel+0x2da>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fa66 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	e01e      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x318>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2102      	movs	r1, #2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fa5b 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80019f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e004      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x330>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	e014      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001a3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e004      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d106      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa2e 	bl	8000ec8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2103      	movs	r1, #3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fa12 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x398>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2103      	movs	r1, #3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fa07 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	f003 021f 	and.w	r2, r3, #31
 8001a96:	e017      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x3c8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2103      	movs	r1, #3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f9fc 	bl	8000e9c <LL_ADC_GetOffsetChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ab2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001ab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e003      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x3e0>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	e011      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x404>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001af0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001af2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e003      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f9d9 	bl	8000ec8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff faf4 	bl	8001108 <LL_ADC_IsEnabled>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8140 	bne.w	8001da8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f7ff fa4d 	bl	8000fd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4a8f      	ldr	r2, [pc, #572]	@ (8001d7c <HAL_ADC_ConfigChannel+0x67c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	f040 8131 	bne.w	8001da8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x46e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	bf94      	ite	ls
 8001b66:	2301      	movls	r3, #1
 8001b68:	2300      	movhi	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e019      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x4a2>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d079      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x4c2>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	3301      	adds	r3, #1
 8001bba:	069b      	lsls	r3, r3, #26
 8001bbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc0:	e015      	b.n	8001bee <HAL_ADC_ConfigChannel+0x4ee>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	069b      	lsls	r3, r3, #26
 8001bea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x50e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	e017      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x53e>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x564>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	051b      	lsls	r3, r3, #20
 8001c62:	e018      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x596>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	e003      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f003 021f 	and.w	r2, r3, #31
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c96:	430b      	orrs	r3, r1
 8001c98:	e081      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x5b6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb4:	e015      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x5e2>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	069b      	lsls	r3, r3, #26
 8001cde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x602>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	e017      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x632>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e003      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	ea42 0103 	orr.w	r1, r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x65e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	051b      	lsls	r3, r3, #20
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	e01e      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x69c>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e006      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x688>
 8001d7a:	bf00      	nop
 8001d7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f003 021f 	and.w	r2, r3, #31
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	3b1e      	subs	r3, #30
 8001d96:	051b      	lsls	r3, r3, #20
 8001d98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7ff f8ea 	bl	8000f7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d06c      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db4:	483c      	ldr	r0, [pc, #240]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001db6:	f7ff f83f 	bl	8000e38 <LL_ADC_GetCommonPathInternalCh>
 8001dba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001eac <HAL_ADC_ConfigChannel+0x7ac>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d127      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d121      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a35      	ldr	r2, [pc, #212]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d157      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001de2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001de6:	4619      	mov	r1, r3
 8001de8:	482f      	ldr	r0, [pc, #188]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001dea:	f7ff f812 	bl	8000e12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dee:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	4a30      	ldr	r2, [pc, #192]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	099b      	lsrs	r3, r3, #6
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e16:	e03a      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <HAL_ADC_ConfigChannel+0x7bc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d113      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10d      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12a      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e40:	4619      	mov	r1, r3
 8001e42:	4819      	ldr	r0, [pc, #100]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e44:	f7fe ffe5 	bl	8000e12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e48:	e021      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d11c      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d116      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d111      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e76:	f7fe ffcc 	bl	8000e12 <LL_ADC_SetCommonPathInternalCh>
 8001e7a:	e008      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e96:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	37d8      	adds	r7, #216	@ 0xd8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	80080000 	.word	0x80080000
 8001ea8:	50040300 	.word	0x50040300
 8001eac:	c7520000 	.word	0xc7520000
 8001eb0:	50040000 	.word	0x50040000
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	053e2d63 	.word	0x053e2d63
 8001ebc:	cb840000 	.word	0xcb840000
 8001ec0:	80000001 	.word	0x80000001

08001ec4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f962 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 8001ee0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f983 	bl	80011f2 <LL_ADC_INJ_IsConversionOngoing>
 8001eec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8098 	beq.w	800202c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d02a      	beq.n	8001f60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7e5b      	ldrb	r3, [r3, #25]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d126      	bne.n	8001f60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7e1b      	ldrb	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d122      	bne.n	8001f60 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f1e:	e014      	b.n	8001f4a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4a45      	ldr	r2, [pc, #276]	@ (8002038 <ADC_ConversionStop+0x174>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d90d      	bls.n	8001f44 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2c:	f043 0210 	orr.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e074      	b.n	800202e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f54:	2b40      	cmp	r3, #64	@ 0x40
 8001f56:	d1e3      	bne.n	8001f20 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2240      	movs	r2, #64	@ 0x40
 8001f5e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d014      	beq.n	8001f90 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f91a 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f8d7 	bl	800112e <LL_ADC_IsDisableOngoing>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d104      	bne.n	8001f90 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f8f6 	bl	800117c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d014      	beq.n	8001fc0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f929 	bl	80011f2 <LL_ADC_INJ_IsConversionOngoing>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f8bf 	bl	800112e <LL_ADC_IsDisableOngoing>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d104      	bne.n	8001fc0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f905 	bl	80011ca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d005      	beq.n	8001fd2 <ADC_ConversionStop+0x10e>
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d105      	bne.n	8001fd8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001fcc:	230c      	movs	r3, #12
 8001fce:	617b      	str	r3, [r7, #20]
        break;
 8001fd0:	e005      	b.n	8001fde <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	617b      	str	r3, [r7, #20]
        break;
 8001fd6:	e002      	b.n	8001fde <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]
        break;
 8001fdc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001fde:	f7fe fed5 	bl	8000d8c <HAL_GetTick>
 8001fe2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001fe4:	e01b      	b.n	800201e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001fe6:	f7fe fed1 	bl	8000d8c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d914      	bls.n	800201e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e007      	b.n	800202e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1dc      	bne.n	8001fe6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	a33fffff 	.word	0xa33fffff

0800203c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f85b 	bl	8001108 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d169      	bne.n	800212c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <ADC_Enable+0xfc>)
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e055      	b.n	800212e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f816 	bl	80010b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800208c:	482b      	ldr	r0, [pc, #172]	@ (800213c <ADC_Enable+0x100>)
 800208e:	f7fe fed3 	bl	8000e38 <LL_ADC_GetCommonPathInternalCh>
 8002092:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002094:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800209c:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <ADC_Enable+0x104>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	4a28      	ldr	r2, [pc, #160]	@ (8002144 <ADC_Enable+0x108>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020b6:	e002      	b.n	80020be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f9      	bne.n	80020b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fe62 	bl	8000d8c <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ca:	e028      	b.n	800211e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f819 	bl	8001108 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe ffe9 	bl	80010b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020e6:	f7fe fe51 	bl	8000d8c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d914      	bls.n	800211e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00d      	beq.n	800211e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e007      	b.n	800212e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d1cf      	bne.n	80020cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	8000003f 	.word	0x8000003f
 800213c:	50040300 	.word	0x50040300
 8002140:	20000000 	.word	0x20000000
 8002144:	053e2d63 	.word	0x053e2d63

08002148 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe ffea 	bl	800112e <LL_ADC_IsDisableOngoing>
 800215a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe ffd1 	bl	8001108 <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d047      	beq.n	80021fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d144      	bne.n	80021fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030d 	and.w	r3, r3, #13
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10c      	bne.n	800219a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe ffab 	bl	80010e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2203      	movs	r2, #3
 8002190:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002192:	f7fe fdfb 	bl	8000d8c <HAL_GetTick>
 8002196:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002198:	e029      	b.n	80021ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e023      	b.n	80021fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021b6:	f7fe fde9 	bl	8000d8c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d914      	bls.n	80021ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e007      	b.n	80021fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1dc      	bne.n	80021b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	@ (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff47 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff5c 	bl	8002250 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffb0 	bl	8002328 <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e2:	e148      	b.n	8002676 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 813a 	beq.w	8002670 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d005      	beq.n	8002414 <HAL_GPIO_Init+0x40>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d130      	bne.n	8002476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244a:	2201      	movs	r2, #1
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0201 	and.w	r2, r3, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b03      	cmp	r3, #3
 8002480:	d017      	beq.n	80024b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d123      	bne.n	8002506 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	6939      	ldr	r1, [r7, #16]
 8002502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0203 	and.w	r2, r3, #3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8094 	beq.w	8002670 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002548:	4b52      	ldr	r3, [pc, #328]	@ (8002694 <HAL_GPIO_Init+0x2c0>)
 800254a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254c:	4a51      	ldr	r2, [pc, #324]	@ (8002694 <HAL_GPIO_Init+0x2c0>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6613      	str	r3, [r2, #96]	@ 0x60
 8002554:	4b4f      	ldr	r3, [pc, #316]	@ (8002694 <HAL_GPIO_Init+0x2c0>)
 8002556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002560:	4a4d      	ldr	r2, [pc, #308]	@ (8002698 <HAL_GPIO_Init+0x2c4>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800258a:	d00d      	beq.n	80025a8 <HAL_GPIO_Init+0x1d4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a43      	ldr	r2, [pc, #268]	@ (800269c <HAL_GPIO_Init+0x2c8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <HAL_GPIO_Init+0x1d0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a42      	ldr	r2, [pc, #264]	@ (80026a0 <HAL_GPIO_Init+0x2cc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_GPIO_Init+0x1cc>
 800259c:	2302      	movs	r3, #2
 800259e:	e004      	b.n	80025aa <HAL_GPIO_Init+0x1d6>
 80025a0:	2307      	movs	r3, #7
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x1d6>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_Init+0x1d6>
 80025a8:	2300      	movs	r3, #0
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ba:	4937      	ldr	r1, [pc, #220]	@ (8002698 <HAL_GPIO_Init+0x2c4>)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ec:	4a2d      	ldr	r2, [pc, #180]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f2:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261c:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002640:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002646:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800266a:	4a0e      	ldr	r2, [pc, #56]	@ (80026a4 <HAL_GPIO_Init+0x2d0>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f aeaf 	bne.w	80023e4 <HAL_GPIO_Init+0x10>
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <HAL_PWREx_GetVoltageRange+0x18>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40007000 	.word	0x40007000

08002714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002722:	d130      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002724:	4b23      	ldr	r3, [pc, #140]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800272c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002730:	d038      	beq.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800273a:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002742:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2232      	movs	r2, #50	@ 0x32
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	4a1b      	ldr	r2, [pc, #108]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	3301      	adds	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002758:	e002      	b.n	8002760 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276c:	d102      	bne.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x60>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f2      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002774:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002780:	d110      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e00f      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002792:	d007      	beq.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002794:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800279c:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40007000 	.word	0x40007000
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83

080027c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f000 bc02 	b.w	8002fd8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4b96      	ldr	r3, [pc, #600]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4b94      	ldr	r3, [pc, #592]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80e4 	beq.w	80029be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_RCC_OscConfig+0x4c>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	f040 808b 	bne.w	800291a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 8087 	bne.w	800291a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280c:	4b88      	ldr	r3, [pc, #544]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_OscConfig+0x64>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e3d9      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	4b81      	ldr	r3, [pc, #516]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_RCC_OscConfig+0x7e>
 8002834:	4b7e      	ldr	r3, [pc, #504]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800283c:	e005      	b.n	800284a <HAL_RCC_OscConfig+0x8a>
 800283e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800284a:	4293      	cmp	r3, r2
 800284c:	d223      	bcs.n	8002896 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd8c 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3ba      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002862:	4b73      	ldr	r3, [pc, #460]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a72      	ldr	r2, [pc, #456]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b70      	ldr	r3, [pc, #448]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	496d      	ldr	r1, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4b6b      	ldr	r3, [pc, #428]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4968      	ldr	r1, [pc, #416]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e025      	b.n	80028e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002896:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a65      	ldr	r2, [pc, #404]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b63      	ldr	r3, [pc, #396]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4960      	ldr	r1, [pc, #384]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	495b      	ldr	r1, [pc, #364]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fd4c 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e37a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e2:	f000 fc81 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	4950      	ldr	r1, [pc, #320]	@ (8002a34 <HAL_RCC_OscConfig+0x274>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002a38 <HAL_RCC_OscConfig+0x278>)
 8002900:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002902:	4b4e      	ldr	r3, [pc, #312]	@ (8002a3c <HAL_RCC_OscConfig+0x27c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe f9f0 	bl	8000cec <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d052      	beq.n	80029bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	e35e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d032      	beq.n	8002988 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002922:	4b43      	ldr	r3, [pc, #268]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a42      	ldr	r2, [pc, #264]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800292e:	f7fe fa2d 	bl	8000d8c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002936:	f7fe fa29 	bl	8000d8c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e347      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002948:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002954:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4930      	ldr	r1, [pc, #192]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002972:	4b2f      	ldr	r3, [pc, #188]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	492b      	ldr	r1, [pc, #172]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
 8002986:	e01a      	b.n	80029be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002988:	4b29      	ldr	r3, [pc, #164]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a28      	ldr	r2, [pc, #160]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002994:	f7fe f9fa 	bl	8000d8c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800299c:	f7fe f9f6 	bl	8000d8c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e314      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ae:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1dc>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d073      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x21c>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d10e      	bne.n	80029f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d063      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d15f      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e2f1      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x24c>
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a0b      	ldr	r2, [pc, #44]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e025      	b.n	8002a58 <HAL_RCC_OscConfig+0x298>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a14:	d114      	bne.n	8002a40 <HAL_RCC_OscConfig+0x280>
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a05      	ldr	r2, [pc, #20]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a02      	ldr	r2, [pc, #8]	@ (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e013      	b.n	8002a58 <HAL_RCC_OscConfig+0x298>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08004e10 	.word	0x08004e10
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	4ba0      	ldr	r3, [pc, #640]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a9f      	ldr	r2, [pc, #636]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b9d      	ldr	r3, [pc, #628]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a9c      	ldr	r2, [pc, #624]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe f994 	bl	8000d8c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe f990 	bl	8000d8c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	@ 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2ae      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7a:	4b92      	ldr	r3, [pc, #584]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2a8>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe f980 	bl	8000d8c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe f97c 	bl	8000d8c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e29a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa2:	4b88      	ldr	r3, [pc, #544]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d0>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x310>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d119      	bne.n	8002afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d116      	bne.n	8002afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad0:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x328>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e277      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b76      	ldr	r3, [pc, #472]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	4973      	ldr	r1, [pc, #460]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afc:	e040      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d023      	beq.n	8002b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b06:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe f93b 	bl	8000d8c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe f937 	bl	8000d8c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e255      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b2c:	4b65      	ldr	r3, [pc, #404]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b62      	ldr	r3, [pc, #392]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	495f      	ldr	r1, [pc, #380]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
 8002b4c:	e018      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5c      	ldr	r2, [pc, #368]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe f917 	bl	8000d8c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fe f913 	bl	8000d8c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e231      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b74:	4b53      	ldr	r3, [pc, #332]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b94:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f8f2 	bl	8000d8c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe f8ee 	bl	8000d8c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e20c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bbe:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x3ec>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bce:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe f8d5 	bl	8000d8c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe f8d1 	bl	8000d8c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1ef      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf8:	4b32      	ldr	r3, [pc, #200]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a6 	beq.w	8002d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c18:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	4a26      	ldr	r2, [pc, #152]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c30:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d118      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c58:	f7fe f898 	bl	8000d8c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe f894 	bl	8000d8c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1b2      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4d8>
 8002c86:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c96:	e029      	b.n	8002cec <HAL_RCC_OscConfig+0x52c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d115      	bne.n	8002ccc <HAL_RCC_OscConfig+0x50c>
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	4a03      	ldr	r2, [pc, #12]	@ (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc0:	e014      	b.n	8002cec <HAL_RCC_OscConfig+0x52c>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	4b9a      	ldr	r3, [pc, #616]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	4a99      	ldr	r2, [pc, #612]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cdc:	4b96      	ldr	r3, [pc, #600]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce2:	4a95      	ldr	r2, [pc, #596]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe f84a 	bl	8000d8c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe f846 	bl	8000d8c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e162      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	4b89      	ldr	r3, [pc, #548]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ed      	beq.n	8002cfc <HAL_RCC_OscConfig+0x53c>
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe f833 	bl	8000d8c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe f82f 	bl	8000d8c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e14b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	4b7d      	ldr	r3, [pc, #500]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ed      	bne.n	8002d2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4e:	7ffb      	ldrb	r3, [r7, #31]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b78      	ldr	r3, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	4a77      	ldr	r2, [pc, #476]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d74:	4b70      	ldr	r3, [pc, #448]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d7a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f802 	bl	8000d8c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d8c:	f7fd fffe 	bl	8000d8c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e11c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d9e:	4b66      	ldr	r3, [pc, #408]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x5cc>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dae:	4b62      	ldr	r3, [pc, #392]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002db4:	4a60      	ldr	r2, [pc, #384]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fd ffe5 	bl	8000d8c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc6:	f7fd ffe1 	bl	8000d8c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0ff      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd8:	4b57      	ldr	r3, [pc, #348]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80f3 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f040 80c9 	bne.w	8002f8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0203 	and.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d12c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d123      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d11b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d113      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d109      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d06b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d062      	beq.n	8002f34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e6e:	4b32      	ldr	r3, [pc, #200]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0ac      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2d      	ldr	r2, [pc, #180]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e8a:	f7fd ff7f 	bl	8000d8c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fd ff7b 	bl	8000d8c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e099      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002eca:	0212      	lsls	r2, r2, #8
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0552      	lsls	r2, r2, #21
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	0652      	lsls	r2, r2, #25
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eea:	06d2      	lsls	r2, r2, #27
 8002eec:	430a      	orrs	r2, r1
 8002eee:	4912      	ldr	r1, [pc, #72]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f0c:	f7fd ff3e 	bl	8000d8c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fd ff3a 	bl	8000d8c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e058      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f32:	e050      	b.n	8002fd6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e04f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d144      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f64:	f7fd ff12 	bl	8000d8c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fd ff0e 	bl	8000d8c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e02c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x7ac>
 8002f8a:	e024      	b.n	8002fd6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d01f      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fd fef5 	bl	8000d8c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fd fef1 	bl	8000d8c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4905      	ldr	r1, [pc, #20]	@ (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	feeefffc 	.word	0xfeeefffc

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0e7      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b75      	ldr	r3, [pc, #468]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b72      	ldr	r3, [pc, #456]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4970      	ldr	r1, [pc, #448]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b6e      	ldr	r3, [pc, #440]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0cf      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003044:	429a      	cmp	r2, r3
 8003046:	d908      	bls.n	800305a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b63      	ldr	r3, [pc, #396]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4960      	ldr	r1, [pc, #384]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04c      	beq.n	8003100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	4b5a      	ldr	r3, [pc, #360]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d121      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0a6      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003086:	4b54      	ldr	r3, [pc, #336]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d115      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e09a      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309e:	4b4e      	ldr	r3, [pc, #312]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e08e      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ae:	4b4a      	ldr	r3, [pc, #296]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e086      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b46      	ldr	r3, [pc, #280]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4943      	ldr	r1, [pc, #268]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fd fe5c 	bl	8000d8c <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fd fe58 	bl	8000d8c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e06e      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b3a      	ldr	r3, [pc, #232]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003118:	429a      	cmp	r2, r3
 800311a:	d208      	bcs.n	800312e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b2e      	ldr	r3, [pc, #184]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	492b      	ldr	r1, [pc, #172]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800312e:	4b29      	ldr	r3, [pc, #164]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d210      	bcs.n	800315e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313c:	4b25      	ldr	r3, [pc, #148]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 0207 	bic.w	r2, r3, #7
 8003144:	4923      	ldr	r1, [pc, #140]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e036      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316a:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4918      	ldr	r1, [pc, #96]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4910      	ldr	r1, [pc, #64]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800319c:	f000 f824 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	490b      	ldr	r1, [pc, #44]	@ (80031dc <HAL_RCC_ClockConfig+0x1f4>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_RCC_ClockConfig+0x1fc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd fd93 	bl	8000cec <HAL_InitTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ca:	7afb      	ldrb	r3, [r7, #11]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08004e10 	.word	0x08004e10
 80031e0:	20000000 	.word	0x20000000
 80031e4:	20000004 	.word	0x20000004

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	@ 0x24
 80031ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f6:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003200:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x34>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d121      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d11e      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800321c:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003228:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e005      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003238:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003244:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d102      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003260:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e004      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d101      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800326c:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x114>)
 800326e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d134      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003276:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0xa6>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d003      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0xac>
 800328c:	e005      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800328e:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003290:	617b      	str	r3, [r7, #20]
      break;
 8003292:	e005      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003296:	617b      	str	r3, [r7, #20]
      break;
 8003298:	e002      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	617b      	str	r3, [r7, #20]
      break;
 800329e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a0:	4b13      	ldr	r3, [pc, #76]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	3301      	adds	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	fb03 f202 	mul.w	r2, r3, r2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0e5b      	lsrs	r3, r3, #25
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	3301      	adds	r3, #1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032e0:	69bb      	ldr	r3, [r7, #24]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	08004e28 	.word	0x08004e28
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4904      	ldr	r1, [pc, #16]	@ (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	08004e20 	.word	0x08004e20

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003348:	f7ff ffda 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	@ (800336c <HAL_RCC_GetPCLK2Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08004e20 	.word	0x08004e20

08003370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800337c:	4b2a      	ldr	r3, [pc, #168]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003388:	f7ff f9b6 	bl	80026f8 <HAL_PWREx_GetVoltageRange>
 800338c:	6178      	str	r0, [r7, #20]
 800338e:	e014      	b.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b25      	ldr	r3, [pc, #148]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	4a24      	ldr	r2, [pc, #144]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339a:	6593      	str	r3, [r2, #88]	@ 0x58
 800339c:	4b22      	ldr	r3, [pc, #136]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a8:	f7ff f9a6 	bl	80026f8 <HAL_PWREx_GetVoltageRange>
 80033ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c0:	d10b      	bne.n	80033da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	@ 0x80
 80033c6:	d919      	bls.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80033cc:	d902      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ce:	2302      	movs	r3, #2
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e013      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e010      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b80      	cmp	r3, #128	@ 0x80
 80033de:	d902      	bls.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033e0:	2303      	movs	r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e00a      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b80      	cmp	r3, #128	@ 0x80
 80033ea:	d102      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ec:	2302      	movs	r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e004      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b70      	cmp	r3, #112	@ 0x70
 80033f6:	d101      	bne.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 0207 	bic.w	r2, r3, #7
 8003404:	4909      	ldr	r1, [pc, #36]	@ (800342c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800340c:	4b07      	ldr	r3, [pc, #28]	@ (800342c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	40022000 	.word	0x40022000

08003430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003438:	2300      	movs	r3, #0
 800343a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800343c:	2300      	movs	r3, #0
 800343e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d031      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003454:	d01a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800345a:	d814      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003460:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003464:	d10f      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003466:	4b5d      	ldr	r3, [pc, #372]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a5c      	ldr	r2, [pc, #368]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003472:	e00c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f9de 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	74fb      	strb	r3, [r7, #19]
      break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003494:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	494e      	ldr	r1, [pc, #312]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034aa:	e001      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 809e 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c2:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b40      	ldr	r3, [pc, #256]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034dc:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e4:	4b3d      	ldr	r3, [pc, #244]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f4:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a39      	ldr	r2, [pc, #228]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003500:	f7fd fc44 	bl	8000d8c <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fd fc40 	bl	8000d8c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
        break;
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351c:	4b30      	ldr	r3, [pc, #192]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d15a      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800352e:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d019      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354a:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003554:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355c:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003566:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003576:	4a19      	ldr	r2, [pc, #100]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d016      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd fc00 	bl	8000d8c <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	e00b      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fd fbfc 	bl	8000d8c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d902      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	74fb      	strb	r3, [r7, #19]
            break;
 80035a6:	e006      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ec      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035bc:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ca:	4904      	ldr	r1, [pc, #16]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035d2:	e009      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
 80035d8:	e006      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e8:	7c7b      	ldrb	r3, [r7, #17]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	4a89      	ldr	r2, [pc, #548]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003606:	4b84      	ldr	r3, [pc, #528]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4980      	ldr	r1, [pc, #512]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003628:	4b7b      	ldr	r3, [pc, #492]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f023 020c 	bic.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	4978      	ldr	r1, [pc, #480]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800364a:	4b73      	ldr	r3, [pc, #460]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	496f      	ldr	r1, [pc, #444]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800366c:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367a:	4967      	ldr	r1, [pc, #412]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368e:	4b62      	ldr	r3, [pc, #392]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003694:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	495e      	ldr	r1, [pc, #376]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036b0:	4b59      	ldr	r3, [pc, #356]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	4956      	ldr	r1, [pc, #344]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d2:	4b51      	ldr	r3, [pc, #324]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	494d      	ldr	r1, [pc, #308]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d028      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f4:	4b48      	ldr	r3, [pc, #288]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	4945      	ldr	r1, [pc, #276]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003712:	d106      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003714:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a3f      	ldr	r2, [pc, #252]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	e011      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800372a:	d10c      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f882 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003752:	4b31      	ldr	r3, [pc, #196]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003760:	492d      	ldr	r1, [pc, #180]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003770:	d106      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003772:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800377c:	60d3      	str	r3, [r2, #12]
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f853 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037b0:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037be:	4916      	ldr	r1, [pc, #88]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ce:	d10c      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f830 	bl	800383c <RCCEx_PLLSAI1_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003804:	4904      	ldr	r1, [pc, #16]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800380c:	7cbb      	ldrb	r3, [r7, #18]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384a:	4b74      	ldr	r3, [pc, #464]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003856:	4b71      	ldr	r3, [pc, #452]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d10d      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
       ||
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800386e:	4b6b      	ldr	r3, [pc, #428]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
       ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d047      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e044      	b.n	8003912 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d018      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x86>
 8003890:	2b03      	cmp	r3, #3
 8003892:	d825      	bhi.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d002      	beq.n	800389e <RCCEx_PLLSAI1_Config+0x62>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d009      	beq.n	80038b0 <RCCEx_PLLSAI1_Config+0x74>
 800389c:	e020      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800389e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ae:	e01a      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d116      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e013      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c2:	4b56      	ldr	r3, [pc, #344]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ce:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038de:	e006      	b.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e004      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038f6:	4b49      	ldr	r3, [pc, #292]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	430b      	orrs	r3, r1
 800390c:	4943      	ldr	r1, [pc, #268]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d17c      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003918:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800391e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fd fa32 	bl	8000d8c <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800392c:	f7fd fa2e 	bl	8000d8c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
        break;
 800393e:	e005      	b.n	800394c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003940:	4b36      	ldr	r3, [pc, #216]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ef      	bne.n	800392c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d15f      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d110      	bne.n	800397a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003958:	4b30      	ldr	r3, [pc, #192]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003960:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	0211      	lsls	r1, r2, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	06d2      	lsls	r2, r2, #27
 8003970:	430a      	orrs	r2, r1
 8003972:	492a      	ldr	r1, [pc, #168]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	610b      	str	r3, [r1, #16]
 8003978:	e027      	b.n	80039ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d112      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003980:	4b26      	ldr	r3, [pc, #152]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003988:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6892      	ldr	r2, [r2, #8]
 8003990:	0211      	lsls	r1, r2, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6912      	ldr	r2, [r2, #16]
 8003996:	0852      	lsrs	r2, r2, #1
 8003998:	3a01      	subs	r2, #1
 800399a:	0552      	lsls	r2, r2, #21
 800399c:	430a      	orrs	r2, r1
 800399e:	491f      	ldr	r1, [pc, #124]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
 80039a4:	e011      	b.n	80039ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6892      	ldr	r2, [r2, #8]
 80039b6:	0211      	lsls	r1, r2, #8
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6952      	ldr	r2, [r2, #20]
 80039bc:	0852      	lsrs	r2, r2, #1
 80039be:	3a01      	subs	r2, #1
 80039c0:	0652      	lsls	r2, r2, #25
 80039c2:	430a      	orrs	r2, r1
 80039c4:	4915      	ldr	r1, [pc, #84]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039ca:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd f9d9 	bl	8000d8c <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039dc:	e009      	b.n	80039f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039de:	f7fd f9d5 	bl	8000d8c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d902      	bls.n	80039f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	73fb      	strb	r3, [r7, #15]
          break;
 80039f0:	e005      	b.n	80039fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ef      	beq.n	80039de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4903      	ldr	r1, [pc, #12]	@ (8003a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e040      	b.n	8003ab4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd f82e 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	@ 0x24
 8003a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fade 	bl	8004028 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8af 	bl	8003bd0 <UART_SetConfig>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e01b      	b.n	8003ab4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb5d 	bl	800416c <UART_CheckIdleState>
 8003ab2:	4603      	mov	r3, r0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	@ 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d177      	bne.n	8003bc4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Transmit+0x24>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e070      	b.n	8003bc6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2221      	movs	r2, #33	@ 0x21
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af2:	f7fd f94b 	bl	8000d8c <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b10:	d108      	bne.n	8003b24 <HAL_UART_Transmit+0x68>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e003      	b.n	8003b2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b2c:	e02f      	b.n	8003b8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fbbf 	bl	80042bc <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e03b      	b.n	8003bc6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b60:	b292      	uxth	r2, r2
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	3302      	adds	r3, #2
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e007      	b.n	8003b7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1c9      	bne.n	8003b2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2140      	movs	r1, #64	@ 0x40
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fb89 	bl	80042bc <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e005      	b.n	8003bc6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b08a      	sub	sp, #40	@ 0x28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4bb4      	ldr	r3, [pc, #720]	@ (8003ed0 <UART_SetConfig+0x300>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4aa9      	ldr	r2, [pc, #676]	@ (8003ed4 <UART_SetConfig+0x304>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4aa0      	ldr	r2, [pc, #640]	@ (8003ed8 <UART_SetConfig+0x308>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d126      	bne.n	8003ca8 <UART_SetConfig+0xd8>
 8003c5a:	4ba0      	ldr	r3, [pc, #640]	@ (8003edc <UART_SetConfig+0x30c>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d81b      	bhi.n	8003ca0 <UART_SetConfig+0xd0>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <UART_SetConfig+0xa0>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c86:	e080      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8e:	e07c      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c96:	e078      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9e:	e074      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca6:	e070      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a8c      	ldr	r2, [pc, #560]	@ (8003ee0 <UART_SetConfig+0x310>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d138      	bne.n	8003d24 <UART_SetConfig+0x154>
 8003cb2:	4b8a      	ldr	r3, [pc, #552]	@ (8003edc <UART_SetConfig+0x30c>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d82d      	bhi.n	8003d1c <UART_SetConfig+0x14c>
 8003cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <UART_SetConfig+0xf8>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003d1d 	.word	0x08003d1d
 8003cd4:	08003d1d 	.word	0x08003d1d
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003d1d 	.word	0x08003d1d
 8003ce0:	08003d1d 	.word	0x08003d1d
 8003ce4:	08003d1d 	.word	0x08003d1d
 8003ce8:	08003d05 	.word	0x08003d05
 8003cec:	08003d1d 	.word	0x08003d1d
 8003cf0:	08003d1d 	.word	0x08003d1d
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d15 	.word	0x08003d15
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e042      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e03e      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e03a      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e036      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e032      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed4 <UART_SetConfig+0x304>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <UART_SetConfig+0x1b4>
 8003d2e:	4b6b      	ldr	r3, [pc, #428]	@ (8003edc <UART_SetConfig+0x30c>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d3c:	d01a      	beq.n	8003d74 <UART_SetConfig+0x1a4>
 8003d3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d42:	d81b      	bhi.n	8003d7c <UART_SetConfig+0x1ac>
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d48:	d00c      	beq.n	8003d64 <UART_SetConfig+0x194>
 8003d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d4e:	d815      	bhi.n	8003d7c <UART_SetConfig+0x1ac>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x18c>
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d58:	d008      	beq.n	8003d6c <UART_SetConfig+0x19c>
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x1ac>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e012      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6a:	e00e      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e00a      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e006      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e002      	b.n	8003d8a <UART_SetConfig+0x1ba>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a51      	ldr	r2, [pc, #324]	@ (8003ed4 <UART_SetConfig+0x304>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d17a      	bne.n	8003e8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d824      	bhi.n	8003de6 <UART_SetConfig+0x216>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <UART_SetConfig+0x1d4>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003dd7 	.word	0x08003dd7
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003de7 	.word	0x08003de7
 8003dc4:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7ff faa6 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	61f8      	str	r0, [r7, #28]
        break;
 8003dce:	e010      	b.n	8003df2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b44      	ldr	r3, [pc, #272]	@ (8003ee4 <UART_SetConfig+0x314>)
 8003dd2:	61fb      	str	r3, [r7, #28]
        break;
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7ff fa07 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003dda:	61f8      	str	r0, [r7, #28]
        break;
 8003ddc:	e009      	b.n	8003df2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de2:	61fb      	str	r3, [r7, #28]
        break;
 8003de4:	e005      	b.n	8003df2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8107 	beq.w	8004008 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d305      	bcc.n	8003e16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d903      	bls.n	8003e1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e1c:	e0f4      	b.n	8004008 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2200      	movs	r2, #0
 8003e22:	461c      	mov	r4, r3
 8003e24:	4615      	mov	r5, r2
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	022b      	lsls	r3, r5, #8
 8003e30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e34:	0222      	lsls	r2, r4, #8
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	6849      	ldr	r1, [r1, #4]
 8003e3a:	0849      	lsrs	r1, r1, #1
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	4688      	mov	r8, r1
 8003e40:	4681      	mov	r9, r0
 8003e42:	eb12 0a08 	adds.w	sl, r2, r8
 8003e46:	eb43 0b09 	adc.w	fp, r3, r9
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e58:	4650      	mov	r0, sl
 8003e5a:	4659      	mov	r1, fp
 8003e5c:	f7fc fa10 	bl	8000280 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4613      	mov	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e6e:	d308      	bcc.n	8003e82 <UART_SetConfig+0x2b2>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e76:	d204      	bcs.n	8003e82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	60da      	str	r2, [r3, #12]
 8003e80:	e0c2      	b.n	8004008 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e88:	e0be      	b.n	8004008 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e92:	d16a      	bne.n	8003f6a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d834      	bhi.n	8003f06 <UART_SetConfig+0x336>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <UART_SetConfig+0x2d4>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ef1 	.word	0x08003ef1
 8003eb0:	08003f07 	.word	0x08003f07
 8003eb4:	08003ef7 	.word	0x08003ef7
 8003eb8:	08003f07 	.word	0x08003f07
 8003ebc:	08003f07 	.word	0x08003f07
 8003ec0:	08003f07 	.word	0x08003f07
 8003ec4:	08003eff 	.word	0x08003eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7ff fa26 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e020      	b.n	8003f12 <UART_SetConfig+0x342>
 8003ed0:	efff69f3 	.word	0xefff69f3
 8003ed4:	40008000 	.word	0x40008000
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40004400 	.word	0x40004400
 8003ee4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff fa2c 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8003eec:	61f8      	str	r0, [r7, #28]
        break;
 8003eee:	e010      	b.n	8003f12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8004024 <UART_SetConfig+0x454>)
 8003ef2:	61fb      	str	r3, [r7, #28]
        break;
 8003ef4:	e00d      	b.n	8003f12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef6:	f7ff f977 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003efa:	61f8      	str	r0, [r7, #28]
        break;
 8003efc:	e009      	b.n	8003f12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f02:	61fb      	str	r3, [r7, #28]
        break;
 8003f04:	e005      	b.n	8003f12 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d077      	beq.n	8004008 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	005a      	lsls	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b0f      	cmp	r3, #15
 8003f32:	d916      	bls.n	8003f62 <UART_SetConfig+0x392>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3a:	d212      	bcs.n	8003f62 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f023 030f 	bic.w	r3, r3, #15
 8003f44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	8afb      	ldrh	r3, [r7, #22]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	8afa      	ldrh	r2, [r7, #22]
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	e052      	b.n	8004008 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f68:	e04e      	b.n	8004008 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d827      	bhi.n	8003fc2 <UART_SetConfig+0x3f2>
 8003f72:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <UART_SetConfig+0x3a8>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fc3 	.word	0x08003fc3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fc3 	.word	0x08003fc3
 8003f90:	08003fc3 	.word	0x08003fc3
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7ff f9bc 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
        break;
 8003fa2:	e014      	b.n	8003fce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7ff f9ce 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	61f8      	str	r0, [r7, #28]
        break;
 8003faa:	e010      	b.n	8003fce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b1d      	ldr	r3, [pc, #116]	@ (8004024 <UART_SetConfig+0x454>)
 8003fae:	61fb      	str	r3, [r7, #28]
        break;
 8003fb0:	e00d      	b.n	8003fce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7ff f919 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61f8      	str	r0, [r7, #28]
        break;
 8003fb8:	e009      	b.n	8003fce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e005      	b.n	8003fce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fcc:	bf00      	nop
    }

    if (pclk != 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d019      	beq.n	8004008 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	085a      	lsrs	r2, r3, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	441a      	add	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	d909      	bls.n	8004002 <UART_SetConfig+0x432>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff4:	d205      	bcs.n	8004002 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e002      	b.n	8004008 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004014:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004022:	bf00      	nop
 8004024:	00f42400 	.word	0x00f42400

08004028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01a      	beq.n	800413e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004126:	d10a      	bne.n	800413e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  }
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b098      	sub	sp, #96	@ 0x60
 8004170:	af02      	add	r7, sp, #8
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800417c:	f7fc fe06 	bl	8000d8c <HAL_GetTick>
 8004180:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d12e      	bne.n	80041ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	2200      	movs	r2, #0
 800419a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f88c 	bl	80042bc <UART_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d021      	beq.n	80041ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041be:	653b      	str	r3, [r7, #80]	@ 0x50
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e062      	b.n	80042b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d149      	bne.n	8004290 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f856 	bl	80042bc <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d03c      	beq.n	8004290 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	623b      	str	r3, [r7, #32]
   return(result);
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004234:	633b      	str	r3, [r7, #48]	@ 0x30
 8004236:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800423a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	60fb      	str	r3, [r7, #12]
   return(result);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3308      	adds	r3, #8
 8004266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004268:	61fa      	str	r2, [r7, #28]
 800426a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	69b9      	ldr	r1, [r7, #24]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	617b      	str	r3, [r7, #20]
   return(result);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e011      	b.n	80042b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3758      	adds	r7, #88	@ 0x58
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042cc:	e04f      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d04b      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fc fd59 	bl	8000d8c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <UART_WaitOnFlagUntilTimeout+0x30>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e04e      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d037      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b80      	cmp	r3, #128	@ 0x80
 8004302:	d034      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d031      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d110      	bne.n	800433a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2208      	movs	r2, #8
 800431e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f838 	bl	8004396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2208      	movs	r2, #8
 800432a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e029      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004348:	d111      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f81e 	bl	8004396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00f      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	429a      	cmp	r2, r3
 800438a:	d0a0      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004396:	b480      	push	{r7}
 8004398:	b095      	sub	sp, #84	@ 0x54
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e6      	bne.n	800439e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004408:	2b01      	cmp	r3, #1
 800440a:	d118      	bne.n	800443e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	60bb      	str	r3, [r7, #8]
   return(result);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0310 	bic.w	r3, r3, #16
 8004420:	647b      	str	r3, [r7, #68]	@ 0x44
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e6      	bne.n	800440c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004452:	bf00      	nop
 8004454:	3754      	adds	r7, #84	@ 0x54
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <siprintf>:
 8004460:	b40e      	push	{r1, r2, r3}
 8004462:	b500      	push	{lr}
 8004464:	b09c      	sub	sp, #112	@ 0x70
 8004466:	ab1d      	add	r3, sp, #116	@ 0x74
 8004468:	9002      	str	r0, [sp, #8]
 800446a:	9006      	str	r0, [sp, #24]
 800446c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004470:	4809      	ldr	r0, [pc, #36]	@ (8004498 <siprintf+0x38>)
 8004472:	9107      	str	r1, [sp, #28]
 8004474:	9104      	str	r1, [sp, #16]
 8004476:	4909      	ldr	r1, [pc, #36]	@ (800449c <siprintf+0x3c>)
 8004478:	f853 2b04 	ldr.w	r2, [r3], #4
 800447c:	9105      	str	r1, [sp, #20]
 800447e:	6800      	ldr	r0, [r0, #0]
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	a902      	add	r1, sp, #8
 8004484:	f000 f994 	bl	80047b0 <_svfiprintf_r>
 8004488:	9b02      	ldr	r3, [sp, #8]
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	b01c      	add	sp, #112	@ 0x70
 8004490:	f85d eb04 	ldr.w	lr, [sp], #4
 8004494:	b003      	add	sp, #12
 8004496:	4770      	bx	lr
 8004498:	2000000c 	.word	0x2000000c
 800449c:	ffff0208 	.word	0xffff0208

080044a0 <memset>:
 80044a0:	4402      	add	r2, r0
 80044a2:	4603      	mov	r3, r0
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d100      	bne.n	80044aa <memset+0xa>
 80044a8:	4770      	bx	lr
 80044aa:	f803 1b01 	strb.w	r1, [r3], #1
 80044ae:	e7f9      	b.n	80044a4 <memset+0x4>

080044b0 <__errno>:
 80044b0:	4b01      	ldr	r3, [pc, #4]	@ (80044b8 <__errno+0x8>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	2000000c 	.word	0x2000000c

080044bc <__libc_init_array>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	4d0d      	ldr	r5, [pc, #52]	@ (80044f4 <__libc_init_array+0x38>)
 80044c0:	4c0d      	ldr	r4, [pc, #52]	@ (80044f8 <__libc_init_array+0x3c>)
 80044c2:	1b64      	subs	r4, r4, r5
 80044c4:	10a4      	asrs	r4, r4, #2
 80044c6:	2600      	movs	r6, #0
 80044c8:	42a6      	cmp	r6, r4
 80044ca:	d109      	bne.n	80044e0 <__libc_init_array+0x24>
 80044cc:	4d0b      	ldr	r5, [pc, #44]	@ (80044fc <__libc_init_array+0x40>)
 80044ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004500 <__libc_init_array+0x44>)
 80044d0:	f000 fc66 	bl	8004da0 <_init>
 80044d4:	1b64      	subs	r4, r4, r5
 80044d6:	10a4      	asrs	r4, r4, #2
 80044d8:	2600      	movs	r6, #0
 80044da:	42a6      	cmp	r6, r4
 80044dc:	d105      	bne.n	80044ea <__libc_init_array+0x2e>
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e4:	4798      	blx	r3
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7ee      	b.n	80044c8 <__libc_init_array+0xc>
 80044ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ee:	4798      	blx	r3
 80044f0:	3601      	adds	r6, #1
 80044f2:	e7f2      	b.n	80044da <__libc_init_array+0x1e>
 80044f4:	08004e94 	.word	0x08004e94
 80044f8:	08004e94 	.word	0x08004e94
 80044fc:	08004e94 	.word	0x08004e94
 8004500:	08004e98 	.word	0x08004e98

08004504 <__retarget_lock_acquire_recursive>:
 8004504:	4770      	bx	lr

08004506 <__retarget_lock_release_recursive>:
 8004506:	4770      	bx	lr

08004508 <_free_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4605      	mov	r5, r0
 800450c:	2900      	cmp	r1, #0
 800450e:	d041      	beq.n	8004594 <_free_r+0x8c>
 8004510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004514:	1f0c      	subs	r4, r1, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	18e4      	addlt	r4, r4, r3
 800451c:	f000 f8e0 	bl	80046e0 <__malloc_lock>
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <_free_r+0x90>)
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	b933      	cbnz	r3, 8004534 <_free_r+0x2c>
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	6014      	str	r4, [r2, #0]
 800452a:	4628      	mov	r0, r5
 800452c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004530:	f000 b8dc 	b.w	80046ec <__malloc_unlock>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d908      	bls.n	800454a <_free_r+0x42>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	1821      	adds	r1, r4, r0
 800453c:	428b      	cmp	r3, r1
 800453e:	bf01      	itttt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	1809      	addeq	r1, r1, r0
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	e7ed      	b.n	8004526 <_free_r+0x1e>
 800454a:	461a      	mov	r2, r3
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b10b      	cbz	r3, 8004554 <_free_r+0x4c>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d9fa      	bls.n	800454a <_free_r+0x42>
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	1850      	adds	r0, r2, r1
 8004558:	42a0      	cmp	r0, r4
 800455a:	d10b      	bne.n	8004574 <_free_r+0x6c>
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	4401      	add	r1, r0
 8004560:	1850      	adds	r0, r2, r1
 8004562:	4283      	cmp	r3, r0
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	d1e0      	bne.n	800452a <_free_r+0x22>
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	4408      	add	r0, r1
 8004570:	6010      	str	r0, [r2, #0]
 8004572:	e7da      	b.n	800452a <_free_r+0x22>
 8004574:	d902      	bls.n	800457c <_free_r+0x74>
 8004576:	230c      	movs	r3, #12
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	e7d6      	b.n	800452a <_free_r+0x22>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	1821      	adds	r1, r4, r0
 8004580:	428b      	cmp	r3, r1
 8004582:	bf04      	itt	eq
 8004584:	6819      	ldreq	r1, [r3, #0]
 8004586:	685b      	ldreq	r3, [r3, #4]
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	bf04      	itt	eq
 800458c:	1809      	addeq	r1, r1, r0
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	6054      	str	r4, [r2, #4]
 8004592:	e7ca      	b.n	800452a <_free_r+0x22>
 8004594:	bd38      	pop	{r3, r4, r5, pc}
 8004596:	bf00      	nop
 8004598:	200002e8 	.word	0x200002e8

0800459c <sbrk_aligned>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4e0f      	ldr	r6, [pc, #60]	@ (80045dc <sbrk_aligned+0x40>)
 80045a0:	460c      	mov	r4, r1
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	4605      	mov	r5, r0
 80045a6:	b911      	cbnz	r1, 80045ae <sbrk_aligned+0x12>
 80045a8:	f000 fba6 	bl	8004cf8 <_sbrk_r>
 80045ac:	6030      	str	r0, [r6, #0]
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 fba1 	bl	8004cf8 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d103      	bne.n	80045c2 <sbrk_aligned+0x26>
 80045ba:	f04f 34ff 	mov.w	r4, #4294967295
 80045be:	4620      	mov	r0, r4
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	1cc4      	adds	r4, r0, #3
 80045c4:	f024 0403 	bic.w	r4, r4, #3
 80045c8:	42a0      	cmp	r0, r4
 80045ca:	d0f8      	beq.n	80045be <sbrk_aligned+0x22>
 80045cc:	1a21      	subs	r1, r4, r0
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fb92 	bl	8004cf8 <_sbrk_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1f2      	bne.n	80045be <sbrk_aligned+0x22>
 80045d8:	e7ef      	b.n	80045ba <sbrk_aligned+0x1e>
 80045da:	bf00      	nop
 80045dc:	200002e4 	.word	0x200002e4

080045e0 <_malloc_r>:
 80045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e4:	1ccd      	adds	r5, r1, #3
 80045e6:	f025 0503 	bic.w	r5, r5, #3
 80045ea:	3508      	adds	r5, #8
 80045ec:	2d0c      	cmp	r5, #12
 80045ee:	bf38      	it	cc
 80045f0:	250c      	movcc	r5, #12
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	4606      	mov	r6, r0
 80045f6:	db01      	blt.n	80045fc <_malloc_r+0x1c>
 80045f8:	42a9      	cmp	r1, r5
 80045fa:	d904      	bls.n	8004606 <_malloc_r+0x26>
 80045fc:	230c      	movs	r3, #12
 80045fe:	6033      	str	r3, [r6, #0]
 8004600:	2000      	movs	r0, #0
 8004602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046dc <_malloc_r+0xfc>
 800460a:	f000 f869 	bl	80046e0 <__malloc_lock>
 800460e:	f8d8 3000 	ldr.w	r3, [r8]
 8004612:	461c      	mov	r4, r3
 8004614:	bb44      	cbnz	r4, 8004668 <_malloc_r+0x88>
 8004616:	4629      	mov	r1, r5
 8004618:	4630      	mov	r0, r6
 800461a:	f7ff ffbf 	bl	800459c <sbrk_aligned>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	4604      	mov	r4, r0
 8004622:	d158      	bne.n	80046d6 <_malloc_r+0xf6>
 8004624:	f8d8 4000 	ldr.w	r4, [r8]
 8004628:	4627      	mov	r7, r4
 800462a:	2f00      	cmp	r7, #0
 800462c:	d143      	bne.n	80046b6 <_malloc_r+0xd6>
 800462e:	2c00      	cmp	r4, #0
 8004630:	d04b      	beq.n	80046ca <_malloc_r+0xea>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4639      	mov	r1, r7
 8004636:	4630      	mov	r0, r6
 8004638:	eb04 0903 	add.w	r9, r4, r3
 800463c:	f000 fb5c 	bl	8004cf8 <_sbrk_r>
 8004640:	4581      	cmp	r9, r0
 8004642:	d142      	bne.n	80046ca <_malloc_r+0xea>
 8004644:	6821      	ldr	r1, [r4, #0]
 8004646:	1a6d      	subs	r5, r5, r1
 8004648:	4629      	mov	r1, r5
 800464a:	4630      	mov	r0, r6
 800464c:	f7ff ffa6 	bl	800459c <sbrk_aligned>
 8004650:	3001      	adds	r0, #1
 8004652:	d03a      	beq.n	80046ca <_malloc_r+0xea>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	442b      	add	r3, r5
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	f8d8 3000 	ldr.w	r3, [r8]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	bb62      	cbnz	r2, 80046bc <_malloc_r+0xdc>
 8004662:	f8c8 7000 	str.w	r7, [r8]
 8004666:	e00f      	b.n	8004688 <_malloc_r+0xa8>
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	1b52      	subs	r2, r2, r5
 800466c:	d420      	bmi.n	80046b0 <_malloc_r+0xd0>
 800466e:	2a0b      	cmp	r2, #11
 8004670:	d917      	bls.n	80046a2 <_malloc_r+0xc2>
 8004672:	1961      	adds	r1, r4, r5
 8004674:	42a3      	cmp	r3, r4
 8004676:	6025      	str	r5, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	6059      	strne	r1, [r3, #4]
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	bf08      	it	eq
 8004680:	f8c8 1000 	streq.w	r1, [r8]
 8004684:	5162      	str	r2, [r4, r5]
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f82f 	bl	80046ec <__malloc_unlock>
 800468e:	f104 000b 	add.w	r0, r4, #11
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	f020 0007 	bic.w	r0, r0, #7
 8004698:	1ac2      	subs	r2, r0, r3
 800469a:	bf1c      	itt	ne
 800469c:	1a1b      	subne	r3, r3, r0
 800469e:	50a3      	strne	r3, [r4, r2]
 80046a0:	e7af      	b.n	8004602 <_malloc_r+0x22>
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	bf0c      	ite	eq
 80046a8:	f8c8 2000 	streq.w	r2, [r8]
 80046ac:	605a      	strne	r2, [r3, #4]
 80046ae:	e7eb      	b.n	8004688 <_malloc_r+0xa8>
 80046b0:	4623      	mov	r3, r4
 80046b2:	6864      	ldr	r4, [r4, #4]
 80046b4:	e7ae      	b.n	8004614 <_malloc_r+0x34>
 80046b6:	463c      	mov	r4, r7
 80046b8:	687f      	ldr	r7, [r7, #4]
 80046ba:	e7b6      	b.n	800462a <_malloc_r+0x4a>
 80046bc:	461a      	mov	r2, r3
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d1fb      	bne.n	80046bc <_malloc_r+0xdc>
 80046c4:	2300      	movs	r3, #0
 80046c6:	6053      	str	r3, [r2, #4]
 80046c8:	e7de      	b.n	8004688 <_malloc_r+0xa8>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	4630      	mov	r0, r6
 80046d0:	f000 f80c 	bl	80046ec <__malloc_unlock>
 80046d4:	e794      	b.n	8004600 <_malloc_r+0x20>
 80046d6:	6005      	str	r5, [r0, #0]
 80046d8:	e7d6      	b.n	8004688 <_malloc_r+0xa8>
 80046da:	bf00      	nop
 80046dc:	200002e8 	.word	0x200002e8

080046e0 <__malloc_lock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <__malloc_lock+0x8>)
 80046e2:	f7ff bf0f 	b.w	8004504 <__retarget_lock_acquire_recursive>
 80046e6:	bf00      	nop
 80046e8:	200002e0 	.word	0x200002e0

080046ec <__malloc_unlock>:
 80046ec:	4801      	ldr	r0, [pc, #4]	@ (80046f4 <__malloc_unlock+0x8>)
 80046ee:	f7ff bf0a 	b.w	8004506 <__retarget_lock_release_recursive>
 80046f2:	bf00      	nop
 80046f4:	200002e0 	.word	0x200002e0

080046f8 <__ssputs_r>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	688e      	ldr	r6, [r1, #8]
 80046fe:	461f      	mov	r7, r3
 8004700:	42be      	cmp	r6, r7
 8004702:	680b      	ldr	r3, [r1, #0]
 8004704:	4682      	mov	sl, r0
 8004706:	460c      	mov	r4, r1
 8004708:	4690      	mov	r8, r2
 800470a:	d82d      	bhi.n	8004768 <__ssputs_r+0x70>
 800470c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004714:	d026      	beq.n	8004764 <__ssputs_r+0x6c>
 8004716:	6965      	ldr	r5, [r4, #20]
 8004718:	6909      	ldr	r1, [r1, #16]
 800471a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800471e:	eba3 0901 	sub.w	r9, r3, r1
 8004722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004726:	1c7b      	adds	r3, r7, #1
 8004728:	444b      	add	r3, r9
 800472a:	106d      	asrs	r5, r5, #1
 800472c:	429d      	cmp	r5, r3
 800472e:	bf38      	it	cc
 8004730:	461d      	movcc	r5, r3
 8004732:	0553      	lsls	r3, r2, #21
 8004734:	d527      	bpl.n	8004786 <__ssputs_r+0x8e>
 8004736:	4629      	mov	r1, r5
 8004738:	f7ff ff52 	bl	80045e0 <_malloc_r>
 800473c:	4606      	mov	r6, r0
 800473e:	b360      	cbz	r0, 800479a <__ssputs_r+0xa2>
 8004740:	6921      	ldr	r1, [r4, #16]
 8004742:	464a      	mov	r2, r9
 8004744:	f000 fae8 	bl	8004d18 <memcpy>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800474e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	6126      	str	r6, [r4, #16]
 8004756:	6165      	str	r5, [r4, #20]
 8004758:	444e      	add	r6, r9
 800475a:	eba5 0509 	sub.w	r5, r5, r9
 800475e:	6026      	str	r6, [r4, #0]
 8004760:	60a5      	str	r5, [r4, #8]
 8004762:	463e      	mov	r6, r7
 8004764:	42be      	cmp	r6, r7
 8004766:	d900      	bls.n	800476a <__ssputs_r+0x72>
 8004768:	463e      	mov	r6, r7
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	4632      	mov	r2, r6
 800476e:	4641      	mov	r1, r8
 8004770:	f000 faa8 	bl	8004cc4 <memmove>
 8004774:	68a3      	ldr	r3, [r4, #8]
 8004776:	1b9b      	subs	r3, r3, r6
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4433      	add	r3, r6
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	2000      	movs	r0, #0
 8004782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004786:	462a      	mov	r2, r5
 8004788:	f000 fad4 	bl	8004d34 <_realloc_r>
 800478c:	4606      	mov	r6, r0
 800478e:	2800      	cmp	r0, #0
 8004790:	d1e0      	bne.n	8004754 <__ssputs_r+0x5c>
 8004792:	6921      	ldr	r1, [r4, #16]
 8004794:	4650      	mov	r0, sl
 8004796:	f7ff feb7 	bl	8004508 <_free_r>
 800479a:	230c      	movs	r3, #12
 800479c:	f8ca 3000 	str.w	r3, [sl]
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a6:	81a3      	strh	r3, [r4, #12]
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	e7e9      	b.n	8004782 <__ssputs_r+0x8a>
	...

080047b0 <_svfiprintf_r>:
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	4698      	mov	r8, r3
 80047b6:	898b      	ldrh	r3, [r1, #12]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	b09d      	sub	sp, #116	@ 0x74
 80047bc:	4607      	mov	r7, r0
 80047be:	460d      	mov	r5, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	d510      	bpl.n	80047e6 <_svfiprintf_r+0x36>
 80047c4:	690b      	ldr	r3, [r1, #16]
 80047c6:	b973      	cbnz	r3, 80047e6 <_svfiprintf_r+0x36>
 80047c8:	2140      	movs	r1, #64	@ 0x40
 80047ca:	f7ff ff09 	bl	80045e0 <_malloc_r>
 80047ce:	6028      	str	r0, [r5, #0]
 80047d0:	6128      	str	r0, [r5, #16]
 80047d2:	b930      	cbnz	r0, 80047e2 <_svfiprintf_r+0x32>
 80047d4:	230c      	movs	r3, #12
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	b01d      	add	sp, #116	@ 0x74
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	2340      	movs	r3, #64	@ 0x40
 80047e4:	616b      	str	r3, [r5, #20]
 80047e6:	2300      	movs	r3, #0
 80047e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ea:	2320      	movs	r3, #32
 80047ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f4:	2330      	movs	r3, #48	@ 0x30
 80047f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004994 <_svfiprintf_r+0x1e4>
 80047fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047fe:	f04f 0901 	mov.w	r9, #1
 8004802:	4623      	mov	r3, r4
 8004804:	469a      	mov	sl, r3
 8004806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800480a:	b10a      	cbz	r2, 8004810 <_svfiprintf_r+0x60>
 800480c:	2a25      	cmp	r2, #37	@ 0x25
 800480e:	d1f9      	bne.n	8004804 <_svfiprintf_r+0x54>
 8004810:	ebba 0b04 	subs.w	fp, sl, r4
 8004814:	d00b      	beq.n	800482e <_svfiprintf_r+0x7e>
 8004816:	465b      	mov	r3, fp
 8004818:	4622      	mov	r2, r4
 800481a:	4629      	mov	r1, r5
 800481c:	4638      	mov	r0, r7
 800481e:	f7ff ff6b 	bl	80046f8 <__ssputs_r>
 8004822:	3001      	adds	r0, #1
 8004824:	f000 80a7 	beq.w	8004976 <_svfiprintf_r+0x1c6>
 8004828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800482a:	445a      	add	r2, fp
 800482c:	9209      	str	r2, [sp, #36]	@ 0x24
 800482e:	f89a 3000 	ldrb.w	r3, [sl]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 809f 	beq.w	8004976 <_svfiprintf_r+0x1c6>
 8004838:	2300      	movs	r3, #0
 800483a:	f04f 32ff 	mov.w	r2, #4294967295
 800483e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004842:	f10a 0a01 	add.w	sl, sl, #1
 8004846:	9304      	str	r3, [sp, #16]
 8004848:	9307      	str	r3, [sp, #28]
 800484a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800484e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004850:	4654      	mov	r4, sl
 8004852:	2205      	movs	r2, #5
 8004854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004858:	484e      	ldr	r0, [pc, #312]	@ (8004994 <_svfiprintf_r+0x1e4>)
 800485a:	f7fb fcc1 	bl	80001e0 <memchr>
 800485e:	9a04      	ldr	r2, [sp, #16]
 8004860:	b9d8      	cbnz	r0, 800489a <_svfiprintf_r+0xea>
 8004862:	06d0      	lsls	r0, r2, #27
 8004864:	bf44      	itt	mi
 8004866:	2320      	movmi	r3, #32
 8004868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800486c:	0711      	lsls	r1, r2, #28
 800486e:	bf44      	itt	mi
 8004870:	232b      	movmi	r3, #43	@ 0x2b
 8004872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004876:	f89a 3000 	ldrb.w	r3, [sl]
 800487a:	2b2a      	cmp	r3, #42	@ 0x2a
 800487c:	d015      	beq.n	80048aa <_svfiprintf_r+0xfa>
 800487e:	9a07      	ldr	r2, [sp, #28]
 8004880:	4654      	mov	r4, sl
 8004882:	2000      	movs	r0, #0
 8004884:	f04f 0c0a 	mov.w	ip, #10
 8004888:	4621      	mov	r1, r4
 800488a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800488e:	3b30      	subs	r3, #48	@ 0x30
 8004890:	2b09      	cmp	r3, #9
 8004892:	d94b      	bls.n	800492c <_svfiprintf_r+0x17c>
 8004894:	b1b0      	cbz	r0, 80048c4 <_svfiprintf_r+0x114>
 8004896:	9207      	str	r2, [sp, #28]
 8004898:	e014      	b.n	80048c4 <_svfiprintf_r+0x114>
 800489a:	eba0 0308 	sub.w	r3, r0, r8
 800489e:	fa09 f303 	lsl.w	r3, r9, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	46a2      	mov	sl, r4
 80048a8:	e7d2      	b.n	8004850 <_svfiprintf_r+0xa0>
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	9103      	str	r1, [sp, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bfbb      	ittet	lt
 80048b6:	425b      	neglt	r3, r3
 80048b8:	f042 0202 	orrlt.w	r2, r2, #2
 80048bc:	9307      	strge	r3, [sp, #28]
 80048be:	9307      	strlt	r3, [sp, #28]
 80048c0:	bfb8      	it	lt
 80048c2:	9204      	strlt	r2, [sp, #16]
 80048c4:	7823      	ldrb	r3, [r4, #0]
 80048c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80048c8:	d10a      	bne.n	80048e0 <_svfiprintf_r+0x130>
 80048ca:	7863      	ldrb	r3, [r4, #1]
 80048cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ce:	d132      	bne.n	8004936 <_svfiprintf_r+0x186>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048dc:	3402      	adds	r4, #2
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049a4 <_svfiprintf_r+0x1f4>
 80048e4:	7821      	ldrb	r1, [r4, #0]
 80048e6:	2203      	movs	r2, #3
 80048e8:	4650      	mov	r0, sl
 80048ea:	f7fb fc79 	bl	80001e0 <memchr>
 80048ee:	b138      	cbz	r0, 8004900 <_svfiprintf_r+0x150>
 80048f0:	9b04      	ldr	r3, [sp, #16]
 80048f2:	eba0 000a 	sub.w	r0, r0, sl
 80048f6:	2240      	movs	r2, #64	@ 0x40
 80048f8:	4082      	lsls	r2, r0
 80048fa:	4313      	orrs	r3, r2
 80048fc:	3401      	adds	r4, #1
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004904:	4824      	ldr	r0, [pc, #144]	@ (8004998 <_svfiprintf_r+0x1e8>)
 8004906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800490a:	2206      	movs	r2, #6
 800490c:	f7fb fc68 	bl	80001e0 <memchr>
 8004910:	2800      	cmp	r0, #0
 8004912:	d036      	beq.n	8004982 <_svfiprintf_r+0x1d2>
 8004914:	4b21      	ldr	r3, [pc, #132]	@ (800499c <_svfiprintf_r+0x1ec>)
 8004916:	bb1b      	cbnz	r3, 8004960 <_svfiprintf_r+0x1b0>
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	3307      	adds	r3, #7
 800491c:	f023 0307 	bic.w	r3, r3, #7
 8004920:	3308      	adds	r3, #8
 8004922:	9303      	str	r3, [sp, #12]
 8004924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004926:	4433      	add	r3, r6
 8004928:	9309      	str	r3, [sp, #36]	@ 0x24
 800492a:	e76a      	b.n	8004802 <_svfiprintf_r+0x52>
 800492c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004930:	460c      	mov	r4, r1
 8004932:	2001      	movs	r0, #1
 8004934:	e7a8      	b.n	8004888 <_svfiprintf_r+0xd8>
 8004936:	2300      	movs	r3, #0
 8004938:	3401      	adds	r4, #1
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	4619      	mov	r1, r3
 800493e:	f04f 0c0a 	mov.w	ip, #10
 8004942:	4620      	mov	r0, r4
 8004944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004948:	3a30      	subs	r2, #48	@ 0x30
 800494a:	2a09      	cmp	r2, #9
 800494c:	d903      	bls.n	8004956 <_svfiprintf_r+0x1a6>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0c6      	beq.n	80048e0 <_svfiprintf_r+0x130>
 8004952:	9105      	str	r1, [sp, #20]
 8004954:	e7c4      	b.n	80048e0 <_svfiprintf_r+0x130>
 8004956:	fb0c 2101 	mla	r1, ip, r1, r2
 800495a:	4604      	mov	r4, r0
 800495c:	2301      	movs	r3, #1
 800495e:	e7f0      	b.n	8004942 <_svfiprintf_r+0x192>
 8004960:	ab03      	add	r3, sp, #12
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	462a      	mov	r2, r5
 8004966:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <_svfiprintf_r+0x1f0>)
 8004968:	a904      	add	r1, sp, #16
 800496a:	4638      	mov	r0, r7
 800496c:	f3af 8000 	nop.w
 8004970:	1c42      	adds	r2, r0, #1
 8004972:	4606      	mov	r6, r0
 8004974:	d1d6      	bne.n	8004924 <_svfiprintf_r+0x174>
 8004976:	89ab      	ldrh	r3, [r5, #12]
 8004978:	065b      	lsls	r3, r3, #25
 800497a:	f53f af2d 	bmi.w	80047d8 <_svfiprintf_r+0x28>
 800497e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004980:	e72c      	b.n	80047dc <_svfiprintf_r+0x2c>
 8004982:	ab03      	add	r3, sp, #12
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	462a      	mov	r2, r5
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <_svfiprintf_r+0x1f0>)
 800498a:	a904      	add	r1, sp, #16
 800498c:	4638      	mov	r0, r7
 800498e:	f000 f879 	bl	8004a84 <_printf_i>
 8004992:	e7ed      	b.n	8004970 <_svfiprintf_r+0x1c0>
 8004994:	08004e58 	.word	0x08004e58
 8004998:	08004e62 	.word	0x08004e62
 800499c:	00000000 	.word	0x00000000
 80049a0:	080046f9 	.word	0x080046f9
 80049a4:	08004e5e 	.word	0x08004e5e

080049a8 <_printf_common>:
 80049a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	4616      	mov	r6, r2
 80049ae:	4698      	mov	r8, r3
 80049b0:	688a      	ldr	r2, [r1, #8]
 80049b2:	690b      	ldr	r3, [r1, #16]
 80049b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bfb8      	it	lt
 80049bc:	4613      	movlt	r3, r2
 80049be:	6033      	str	r3, [r6, #0]
 80049c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049c4:	4607      	mov	r7, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b10a      	cbz	r2, 80049ce <_printf_common+0x26>
 80049ca:	3301      	adds	r3, #1
 80049cc:	6033      	str	r3, [r6, #0]
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	0699      	lsls	r1, r3, #26
 80049d2:	bf42      	ittt	mi
 80049d4:	6833      	ldrmi	r3, [r6, #0]
 80049d6:	3302      	addmi	r3, #2
 80049d8:	6033      	strmi	r3, [r6, #0]
 80049da:	6825      	ldr	r5, [r4, #0]
 80049dc:	f015 0506 	ands.w	r5, r5, #6
 80049e0:	d106      	bne.n	80049f0 <_printf_common+0x48>
 80049e2:	f104 0a19 	add.w	sl, r4, #25
 80049e6:	68e3      	ldr	r3, [r4, #12]
 80049e8:	6832      	ldr	r2, [r6, #0]
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	42ab      	cmp	r3, r5
 80049ee:	dc26      	bgt.n	8004a3e <_printf_common+0x96>
 80049f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	3b00      	subs	r3, #0
 80049f8:	bf18      	it	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	0692      	lsls	r2, r2, #26
 80049fe:	d42b      	bmi.n	8004a58 <_printf_common+0xb0>
 8004a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a04:	4641      	mov	r1, r8
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c8      	blx	r9
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d01e      	beq.n	8004a4c <_printf_common+0xa4>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	6922      	ldr	r2, [r4, #16]
 8004a12:	f003 0306 	and.w	r3, r3, #6
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	bf02      	ittt	eq
 8004a1a:	68e5      	ldreq	r5, [r4, #12]
 8004a1c:	6833      	ldreq	r3, [r6, #0]
 8004a1e:	1aed      	subeq	r5, r5, r3
 8004a20:	68a3      	ldr	r3, [r4, #8]
 8004a22:	bf0c      	ite	eq
 8004a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a28:	2500      	movne	r5, #0
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	bfc4      	itt	gt
 8004a2e:	1a9b      	subgt	r3, r3, r2
 8004a30:	18ed      	addgt	r5, r5, r3
 8004a32:	2600      	movs	r6, #0
 8004a34:	341a      	adds	r4, #26
 8004a36:	42b5      	cmp	r5, r6
 8004a38:	d11a      	bne.n	8004a70 <_printf_common+0xc8>
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	e008      	b.n	8004a50 <_printf_common+0xa8>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4652      	mov	r2, sl
 8004a42:	4641      	mov	r1, r8
 8004a44:	4638      	mov	r0, r7
 8004a46:	47c8      	blx	r9
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d103      	bne.n	8004a54 <_printf_common+0xac>
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	3501      	adds	r5, #1
 8004a56:	e7c6      	b.n	80049e6 <_printf_common+0x3e>
 8004a58:	18e1      	adds	r1, r4, r3
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	2030      	movs	r0, #48	@ 0x30
 8004a5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a62:	4422      	add	r2, r4
 8004a64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	e7c7      	b.n	8004a00 <_printf_common+0x58>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4622      	mov	r2, r4
 8004a74:	4641      	mov	r1, r8
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c8      	blx	r9
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d0e6      	beq.n	8004a4c <_printf_common+0xa4>
 8004a7e:	3601      	adds	r6, #1
 8004a80:	e7d9      	b.n	8004a36 <_printf_common+0x8e>
	...

08004a84 <_printf_i>:
 8004a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	7e0f      	ldrb	r7, [r1, #24]
 8004a8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a8c:	2f78      	cmp	r7, #120	@ 0x78
 8004a8e:	4691      	mov	r9, r2
 8004a90:	4680      	mov	r8, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	469a      	mov	sl, r3
 8004a96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a9a:	d807      	bhi.n	8004aac <_printf_i+0x28>
 8004a9c:	2f62      	cmp	r7, #98	@ 0x62
 8004a9e:	d80a      	bhi.n	8004ab6 <_printf_i+0x32>
 8004aa0:	2f00      	cmp	r7, #0
 8004aa2:	f000 80d2 	beq.w	8004c4a <_printf_i+0x1c6>
 8004aa6:	2f58      	cmp	r7, #88	@ 0x58
 8004aa8:	f000 80b9 	beq.w	8004c1e <_printf_i+0x19a>
 8004aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ab4:	e03a      	b.n	8004b2c <_printf_i+0xa8>
 8004ab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004aba:	2b15      	cmp	r3, #21
 8004abc:	d8f6      	bhi.n	8004aac <_printf_i+0x28>
 8004abe:	a101      	add	r1, pc, #4	@ (adr r1, 8004ac4 <_printf_i+0x40>)
 8004ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ac4:	08004b1d 	.word	0x08004b1d
 8004ac8:	08004b31 	.word	0x08004b31
 8004acc:	08004aad 	.word	0x08004aad
 8004ad0:	08004aad 	.word	0x08004aad
 8004ad4:	08004aad 	.word	0x08004aad
 8004ad8:	08004aad 	.word	0x08004aad
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004aad 	.word	0x08004aad
 8004ae4:	08004aad 	.word	0x08004aad
 8004ae8:	08004aad 	.word	0x08004aad
 8004aec:	08004aad 	.word	0x08004aad
 8004af0:	08004c31 	.word	0x08004c31
 8004af4:	08004b5b 	.word	0x08004b5b
 8004af8:	08004beb 	.word	0x08004beb
 8004afc:	08004aad 	.word	0x08004aad
 8004b00:	08004aad 	.word	0x08004aad
 8004b04:	08004c53 	.word	0x08004c53
 8004b08:	08004aad 	.word	0x08004aad
 8004b0c:	08004b5b 	.word	0x08004b5b
 8004b10:	08004aad 	.word	0x08004aad
 8004b14:	08004aad 	.word	0x08004aad
 8004b18:	08004bf3 	.word	0x08004bf3
 8004b1c:	6833      	ldr	r3, [r6, #0]
 8004b1e:	1d1a      	adds	r2, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6032      	str	r2, [r6, #0]
 8004b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e09d      	b.n	8004c6c <_printf_i+0x1e8>
 8004b30:	6833      	ldr	r3, [r6, #0]
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	1d19      	adds	r1, r3, #4
 8004b36:	6031      	str	r1, [r6, #0]
 8004b38:	0606      	lsls	r6, r0, #24
 8004b3a:	d501      	bpl.n	8004b40 <_printf_i+0xbc>
 8004b3c:	681d      	ldr	r5, [r3, #0]
 8004b3e:	e003      	b.n	8004b48 <_printf_i+0xc4>
 8004b40:	0645      	lsls	r5, r0, #25
 8004b42:	d5fb      	bpl.n	8004b3c <_printf_i+0xb8>
 8004b44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	da03      	bge.n	8004b54 <_printf_i+0xd0>
 8004b4c:	232d      	movs	r3, #45	@ 0x2d
 8004b4e:	426d      	negs	r5, r5
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b54:	4859      	ldr	r0, [pc, #356]	@ (8004cbc <_printf_i+0x238>)
 8004b56:	230a      	movs	r3, #10
 8004b58:	e011      	b.n	8004b7e <_printf_i+0xfa>
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	0608      	lsls	r0, r1, #24
 8004b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b64:	d402      	bmi.n	8004b6c <_printf_i+0xe8>
 8004b66:	0649      	lsls	r1, r1, #25
 8004b68:	bf48      	it	mi
 8004b6a:	b2ad      	uxthmi	r5, r5
 8004b6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b6e:	4853      	ldr	r0, [pc, #332]	@ (8004cbc <_printf_i+0x238>)
 8004b70:	6033      	str	r3, [r6, #0]
 8004b72:	bf14      	ite	ne
 8004b74:	230a      	movne	r3, #10
 8004b76:	2308      	moveq	r3, #8
 8004b78:	2100      	movs	r1, #0
 8004b7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b7e:	6866      	ldr	r6, [r4, #4]
 8004b80:	60a6      	str	r6, [r4, #8]
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	bfa2      	ittt	ge
 8004b86:	6821      	ldrge	r1, [r4, #0]
 8004b88:	f021 0104 	bicge.w	r1, r1, #4
 8004b8c:	6021      	strge	r1, [r4, #0]
 8004b8e:	b90d      	cbnz	r5, 8004b94 <_printf_i+0x110>
 8004b90:	2e00      	cmp	r6, #0
 8004b92:	d04b      	beq.n	8004c2c <_printf_i+0x1a8>
 8004b94:	4616      	mov	r6, r2
 8004b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ba4:	462f      	mov	r7, r5
 8004ba6:	42bb      	cmp	r3, r7
 8004ba8:	460d      	mov	r5, r1
 8004baa:	d9f4      	bls.n	8004b96 <_printf_i+0x112>
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d10b      	bne.n	8004bc8 <_printf_i+0x144>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	07df      	lsls	r7, r3, #31
 8004bb4:	d508      	bpl.n	8004bc8 <_printf_i+0x144>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	4299      	cmp	r1, r3
 8004bbc:	bfde      	ittt	le
 8004bbe:	2330      	movle	r3, #48	@ 0x30
 8004bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bc8:	1b92      	subs	r2, r2, r6
 8004bca:	6122      	str	r2, [r4, #16]
 8004bcc:	f8cd a000 	str.w	sl, [sp]
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	aa03      	add	r2, sp, #12
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f7ff fee6 	bl	80049a8 <_printf_common>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d14a      	bne.n	8004c76 <_printf_i+0x1f2>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	b004      	add	sp, #16
 8004be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f043 0320 	orr.w	r3, r3, #32
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	4833      	ldr	r0, [pc, #204]	@ (8004cc0 <_printf_i+0x23c>)
 8004bf4:	2778      	movs	r7, #120	@ 0x78
 8004bf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	6831      	ldr	r1, [r6, #0]
 8004bfe:	061f      	lsls	r7, r3, #24
 8004c00:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c04:	d402      	bmi.n	8004c0c <_printf_i+0x188>
 8004c06:	065f      	lsls	r7, r3, #25
 8004c08:	bf48      	it	mi
 8004c0a:	b2ad      	uxthmi	r5, r5
 8004c0c:	6031      	str	r1, [r6, #0]
 8004c0e:	07d9      	lsls	r1, r3, #31
 8004c10:	bf44      	itt	mi
 8004c12:	f043 0320 	orrmi.w	r3, r3, #32
 8004c16:	6023      	strmi	r3, [r4, #0]
 8004c18:	b11d      	cbz	r5, 8004c22 <_printf_i+0x19e>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	e7ac      	b.n	8004b78 <_printf_i+0xf4>
 8004c1e:	4827      	ldr	r0, [pc, #156]	@ (8004cbc <_printf_i+0x238>)
 8004c20:	e7e9      	b.n	8004bf6 <_printf_i+0x172>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	f023 0320 	bic.w	r3, r3, #32
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	e7f6      	b.n	8004c1a <_printf_i+0x196>
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	e7bd      	b.n	8004bac <_printf_i+0x128>
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	6825      	ldr	r5, [r4, #0]
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	1d18      	adds	r0, r3, #4
 8004c38:	6030      	str	r0, [r6, #0]
 8004c3a:	062e      	lsls	r6, r5, #24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	d501      	bpl.n	8004c44 <_printf_i+0x1c0>
 8004c40:	6019      	str	r1, [r3, #0]
 8004c42:	e002      	b.n	8004c4a <_printf_i+0x1c6>
 8004c44:	0668      	lsls	r0, r5, #25
 8004c46:	d5fb      	bpl.n	8004c40 <_printf_i+0x1bc>
 8004c48:	8019      	strh	r1, [r3, #0]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	4616      	mov	r6, r2
 8004c50:	e7bc      	b.n	8004bcc <_printf_i+0x148>
 8004c52:	6833      	ldr	r3, [r6, #0]
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	6032      	str	r2, [r6, #0]
 8004c58:	681e      	ldr	r6, [r3, #0]
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7fb fabe 	bl	80001e0 <memchr>
 8004c64:	b108      	cbz	r0, 8004c6a <_printf_i+0x1e6>
 8004c66:	1b80      	subs	r0, r0, r6
 8004c68:	6060      	str	r0, [r4, #4]
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c74:	e7aa      	b.n	8004bcc <_printf_i+0x148>
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	47d0      	blx	sl
 8004c80:	3001      	adds	r0, #1
 8004c82:	d0ad      	beq.n	8004be0 <_printf_i+0x15c>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	079b      	lsls	r3, r3, #30
 8004c88:	d413      	bmi.n	8004cb2 <_printf_i+0x22e>
 8004c8a:	68e0      	ldr	r0, [r4, #12]
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	bfb8      	it	lt
 8004c92:	4618      	movlt	r0, r3
 8004c94:	e7a6      	b.n	8004be4 <_printf_i+0x160>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4632      	mov	r2, r6
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	47d0      	blx	sl
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d09d      	beq.n	8004be0 <_printf_i+0x15c>
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	68e3      	ldr	r3, [r4, #12]
 8004ca8:	9903      	ldr	r1, [sp, #12]
 8004caa:	1a5b      	subs	r3, r3, r1
 8004cac:	42ab      	cmp	r3, r5
 8004cae:	dcf2      	bgt.n	8004c96 <_printf_i+0x212>
 8004cb0:	e7eb      	b.n	8004c8a <_printf_i+0x206>
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	f104 0619 	add.w	r6, r4, #25
 8004cb8:	e7f5      	b.n	8004ca6 <_printf_i+0x222>
 8004cba:	bf00      	nop
 8004cbc:	08004e69 	.word	0x08004e69
 8004cc0:	08004e7a 	.word	0x08004e7a

08004cc4 <memmove>:
 8004cc4:	4288      	cmp	r0, r1
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	eb01 0402 	add.w	r4, r1, r2
 8004ccc:	d902      	bls.n	8004cd4 <memmove+0x10>
 8004cce:	4284      	cmp	r4, r0
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	d807      	bhi.n	8004ce4 <memmove+0x20>
 8004cd4:	1e43      	subs	r3, r0, #1
 8004cd6:	42a1      	cmp	r1, r4
 8004cd8:	d008      	beq.n	8004cec <memmove+0x28>
 8004cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ce2:	e7f8      	b.n	8004cd6 <memmove+0x12>
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	428a      	cmp	r2, r1
 8004cea:	d100      	bne.n	8004cee <memmove+0x2a>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cf6:	e7f7      	b.n	8004ce8 <memmove+0x24>

08004cf8 <_sbrk_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d06      	ldr	r5, [pc, #24]	@ (8004d14 <_sbrk_r+0x1c>)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	602b      	str	r3, [r5, #0]
 8004d04:	f7fb ff68 	bl	8000bd8 <_sbrk>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d102      	bne.n	8004d12 <_sbrk_r+0x1a>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	b103      	cbz	r3, 8004d12 <_sbrk_r+0x1a>
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	200002dc 	.word	0x200002dc

08004d18 <memcpy>:
 8004d18:	440a      	add	r2, r1
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d20:	d100      	bne.n	8004d24 <memcpy+0xc>
 8004d22:	4770      	bx	lr
 8004d24:	b510      	push	{r4, lr}
 8004d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d2e:	4291      	cmp	r1, r2
 8004d30:	d1f9      	bne.n	8004d26 <memcpy+0xe>
 8004d32:	bd10      	pop	{r4, pc}

08004d34 <_realloc_r>:
 8004d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d38:	4680      	mov	r8, r0
 8004d3a:	4615      	mov	r5, r2
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	b921      	cbnz	r1, 8004d4a <_realloc_r+0x16>
 8004d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d44:	4611      	mov	r1, r2
 8004d46:	f7ff bc4b 	b.w	80045e0 <_malloc_r>
 8004d4a:	b92a      	cbnz	r2, 8004d58 <_realloc_r+0x24>
 8004d4c:	f7ff fbdc 	bl	8004508 <_free_r>
 8004d50:	2400      	movs	r4, #0
 8004d52:	4620      	mov	r0, r4
 8004d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d58:	f000 f81a 	bl	8004d90 <_malloc_usable_size_r>
 8004d5c:	4285      	cmp	r5, r0
 8004d5e:	4606      	mov	r6, r0
 8004d60:	d802      	bhi.n	8004d68 <_realloc_r+0x34>
 8004d62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d66:	d8f4      	bhi.n	8004d52 <_realloc_r+0x1e>
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f7ff fc38 	bl	80045e0 <_malloc_r>
 8004d70:	4607      	mov	r7, r0
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d0ec      	beq.n	8004d50 <_realloc_r+0x1c>
 8004d76:	42b5      	cmp	r5, r6
 8004d78:	462a      	mov	r2, r5
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	bf28      	it	cs
 8004d7e:	4632      	movcs	r2, r6
 8004d80:	f7ff ffca 	bl	8004d18 <memcpy>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4640      	mov	r0, r8
 8004d88:	f7ff fbbe 	bl	8004508 <_free_r>
 8004d8c:	463c      	mov	r4, r7
 8004d8e:	e7e0      	b.n	8004d52 <_realloc_r+0x1e>

08004d90 <_malloc_usable_size_r>:
 8004d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d94:	1f18      	subs	r0, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfbc      	itt	lt
 8004d9a:	580b      	ldrlt	r3, [r1, r0]
 8004d9c:	18c0      	addlt	r0, r0, r3
 8004d9e:	4770      	bx	lr

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
